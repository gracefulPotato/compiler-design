Nonterminals useless in grammar

   token


Terminals unused in grammar

   ROOT
   FUNCTION
   DECL
   TOK_EQ
   TOK_NE
   TOK_LT
   TOK_LE
   TOK_GT
   TOK_GE
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   '%'
   '!'
   NEG
   POS


Rules useless in grammar

   59 token: '('
   60      | ')'
   61      | '['
   62      | ']'
   63      | '{'
   64      | '}'
   65      | ';'
   66      | ','
   67      | '.'
   68      | '='
   69      | '+'
   70      | '-'
   71      | '*'
   72      | '/'
   73      | '%'
   74      | '!'
   75      | TOK_VOID
   76      | TOK_CHAR
   77      | TOK_INT
   78      | TOK_STRING
   79      | TOK_IF
   80      | TOK_ELSE
   81      | TOK_WHILE
   82      | TOK_RETURN
   83      | TOK_STRUCT
   84      | TOK_NULL
   85      | TOK_NEW
   86      | TOK_ARRAY
   87      | TOK_EQ
   88      | TOK_NE
   89      | TOK_LT
   90      | TOK_LE
   91      | TOK_GT
   92      | TOK_GE
   93      | TOK_IDENT
   94      | TOK_INTCON
   95      | TOK_CHARCON
   96      | TOK_STRINGCON
   97      | TOK_ORD
   98      | TOK_CHR
   99      | TOK_ROOT


State 63 conflicts: 6 shift/reduce
State 83 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: structdef
    2        | function
    3        | statement

    4 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    5          | TOK_STRUCT TOK_IDENT '{' fielddecl '}'
    6          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl '}'

    7 fielddecl: basetype TOK_IDENT
    8          | basetype TOK_ARRAY TOK_IDENT

    9 basetype: TOK_VOID
   10         | TOK_CHAR
   11         | TOK_INT
   12         | TOK_STRING
   13         | TOK_IDENT

   14 function: identdecl '(' ')' block
   15         | identdecl '(' params ')' block

   16 params: identdecl
   17       | params ',' identdecl

   18 identdecl: basetype TOK_IDENT
   19          | basetype TOK_ARRAY TOK_IDENT

   20 block: '{' '}'
   21      | '{' statement '}'
   22      | ';'

   23 statement: block
   24          | vardecl
   25          | while
   26          | ifelse
   27          | return
   28          | expr ';'

   29 vardecl: identdecl '=' expr ';'

   30 while: TOK_WHILE '(' expr ')' statement

   31 ifelse: TOK_IF '(' expr ')' statement
   32       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   33 return: TOK_RETURN ';'
   34       | TOK_RETURN expr ';'

   35 expr: expr BINOP expr
   36     | UNOP expr
   37     | allocator
   38     | call
   39     | '(' expr ')'
   40     | variable
   41     | constant

   42 allocator: TOK_NEW TOK_IDENT '(' ')'
   43          | TOK_NEW TOK_STRING '(' expr ')'
   44          | TOK_NEW basetype '[' expr ']'

   45 call: TOK_IDENT '(' ')'
   46     | TOK_IDENT '(' expr ')'

   47 variable: TOK_IDENT
   48         | expr '[' expr ']'
   49         | expr '.' TOK_IDENT

   50 constant: TOK_INTCON
   51         | TOK_CHARCON
   52         | TOK_STRINGCON
   53         | TOK_NULL

   54 UNOP: '-'

   55 BINOP: '+'
   56      | '-'
   57      | '*'
   58      | '/'


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37)
'(' (40) 14 15 30 31 32 39 42 43 45 46
')' (41) 14 15 30 31 32 39 42 43 45 46
'*' (42) 57
'+' (43) 55
',' (44) 17
'-' (45) 54 56
'.' (46) 49
'/' (47) 58
';' (59) 6 22 28 29 33 34
'=' (61) 29
'[' (91) 44 48
']' (93) 44 48
'{' (123) 4 5 6 20 21
'}' (125) 4 5 6 20 21
error (256)
ROOT (258)
FUNCTION (259)
DECL (260)
TOK_VOID (261) 9
TOK_CHAR (262) 10
TOK_INT (263) 11
TOK_STRING (264) 12 43
TOK_IF (265) 31 32
TOK_ELSE (266) 32
TOK_WHILE (267) 30
TOK_RETURN (268) 33 34
TOK_STRUCT (269) 4 5 6
TOK_NULL (270) 53
TOK_NEW (271) 42 43 44
TOK_ARRAY (272) 8 19
TOK_EQ (273)
TOK_NE (274)
TOK_LT (275)
TOK_LE (276)
TOK_GT (277)
TOK_GE (278)
TOK_IDENT (279) 4 5 6 7 8 13 18 19 42 45 46 47 49
TOK_INTCON (280) 50
TOK_CHARCON (281) 51
TOK_STRINGCON (282) 52
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292)
TOK_CHR (293)
TOK_ROOT (294)
NEG (295)
POS (296)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
program (59)
    on left: 1 2 3, on right: 0
structdef (60)
    on left: 4 5 6, on right: 1
fielddecl (61)
    on left: 7 8, on right: 5 6
basetype (62)
    on left: 9 10 11 12 13, on right: 7 8 18 19 44
function (63)
    on left: 14 15, on right: 2
params (64)
    on left: 16 17, on right: 15 17
identdecl (65)
    on left: 18 19, on right: 14 15 16 17 29
block (66)
    on left: 20 21 22, on right: 14 15 23
statement (67)
    on left: 23 24 25 26 27 28, on right: 3 21 30 31 32
vardecl (68)
    on left: 29, on right: 24
while (69)
    on left: 30, on right: 25
ifelse (70)
    on left: 31 32, on right: 26
return (71)
    on left: 33 34, on right: 27
expr (72)
    on left: 35 36 37 38 39 40 41, on right: 28 29 30 31 32 34 35 36
    39 43 44 46 48 49
allocator (73)
    on left: 42 43 44, on right: 37
call (74)
    on left: 45 46, on right: 38
variable (75)
    on left: 47 48 49, on right: 40
constant (76)
    on left: 50 51 52 53, on right: 41
UNOP (77)
    on left: 54, on right: 36
BINOP (78)
    on left: 55 56 57 58, on right: 35


State 0

    0 $accept: . program $end

    TOK_VOID       shift, and go to state 1
    TOK_CHAR       shift, and go to state 2
    TOK_INT        shift, and go to state 3
    TOK_STRING     shift, and go to state 4
    TOK_IF         shift, and go to state 5
    TOK_WHILE      shift, and go to state 6
    TOK_RETURN     shift, and go to state 7
    TOK_STRUCT     shift, and go to state 8
    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '{'            shift, and go to state 16
    ';'            shift, and go to state 17
    '('            shift, and go to state 18

    program    go to state 19
    structdef  go to state 20
    basetype   go to state 21
    function   go to state 22
    identdecl  go to state 23
    block      go to state 24
    statement  go to state 25
    vardecl    go to state 26
    while      go to state 27
    ifelse     go to state 28
    return     go to state 29
    expr       go to state 30
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 1

    9 basetype: TOK_VOID .

    $default  reduce using rule 9 (basetype)


State 2

   10 basetype: TOK_CHAR .

    $default  reduce using rule 10 (basetype)


State 3

   11 basetype: TOK_INT .

    $default  reduce using rule 11 (basetype)


State 4

   12 basetype: TOK_STRING .

    $default  reduce using rule 12 (basetype)


State 5

   31 ifelse: TOK_IF . '(' expr ')' statement
   32       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 36


State 6

   30 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 37


State 7

   33 return: TOK_RETURN . ';'
   34       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    ';'            shift, and go to state 39
    '('            shift, and go to state 18

    expr       go to state 40
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 8

    4 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    5          | TOK_STRUCT . TOK_IDENT '{' fielddecl '}'
    6          | TOK_STRUCT . TOK_IDENT '{' fielddecl ';' fielddecl '}'

    TOK_IDENT  shift, and go to state 41


State 9

   53 constant: TOK_NULL .

    $default  reduce using rule 53 (constant)


State 10

   42 allocator: TOK_NEW . TOK_IDENT '(' ')'
   43          | TOK_NEW . TOK_STRING '(' expr ')'
   44          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 1
    TOK_CHAR    shift, and go to state 2
    TOK_INT     shift, and go to state 3
    TOK_STRING  shift, and go to state 42
    TOK_IDENT   shift, and go to state 43

    basetype  go to state 44


State 11

   13 basetype: TOK_IDENT .
   45 call: TOK_IDENT . '(' ')'
   46     | TOK_IDENT . '(' expr ')'
   47 variable: TOK_IDENT .

    '('  shift, and go to state 45

    TOK_ARRAY  reduce using rule 13 (basetype)
    TOK_IDENT  reduce using rule 13 (basetype)
    $default   reduce using rule 47 (variable)


State 12

   50 constant: TOK_INTCON .

    $default  reduce using rule 50 (constant)


State 13

   51 constant: TOK_CHARCON .

    $default  reduce using rule 51 (constant)


State 14

   52 constant: TOK_STRINGCON .

    $default  reduce using rule 52 (constant)


State 15

   54 UNOP: '-' .

    $default  reduce using rule 54 (UNOP)


State 16

   20 block: '{' . '}'
   21      | '{' . statement '}'

    TOK_VOID       shift, and go to state 1
    TOK_CHAR       shift, and go to state 2
    TOK_INT        shift, and go to state 3
    TOK_STRING     shift, and go to state 4
    TOK_IF         shift, and go to state 5
    TOK_WHILE      shift, and go to state 6
    TOK_RETURN     shift, and go to state 7
    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '{'            shift, and go to state 16
    '}'            shift, and go to state 46
    ';'            shift, and go to state 17
    '('            shift, and go to state 18

    basetype   go to state 21
    identdecl  go to state 47
    block      go to state 24
    statement  go to state 48
    vardecl    go to state 26
    while      go to state 27
    ifelse     go to state 28
    return     go to state 29
    expr       go to state 30
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 17

   22 block: ';' .

    $default  reduce using rule 22 (block)


State 18

   39 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 49
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 19

    0 $accept: program . $end

    $end  shift, and go to state 50


State 20

    1 program: structdef .

    $default  reduce using rule 1 (program)


State 21

   18 identdecl: basetype . TOK_IDENT
   19          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 51
    TOK_IDENT  shift, and go to state 52


State 22

    2 program: function .

    $default  reduce using rule 2 (program)


State 23

   14 function: identdecl . '(' ')' block
   15         | identdecl . '(' params ')' block
   29 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 53
    '('  shift, and go to state 54


State 24

   23 statement: block .

    $default  reduce using rule 23 (statement)


State 25

    3 program: statement .

    $default  reduce using rule 3 (program)


State 26

   24 statement: vardecl .

    $default  reduce using rule 24 (statement)


State 27

   25 statement: while .

    $default  reduce using rule 25 (statement)


State 28

   26 statement: ifelse .

    $default  reduce using rule 26 (statement)


State 29

   27 statement: return .

    $default  reduce using rule 27 (statement)


State 30

   28 statement: expr . ';'
   35 expr: expr . BINOP expr
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ';'  shift, and go to state 59
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 31

   37 expr: allocator .

    $default  reduce using rule 37 (expr)


State 32

   38 expr: call .

    $default  reduce using rule 38 (expr)


State 33

   40 expr: variable .

    $default  reduce using rule 40 (expr)


State 34

   41 expr: constant .

    $default  reduce using rule 41 (expr)


State 35

   36 expr: UNOP . expr

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 63
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 36

   31 ifelse: TOK_IF '(' . expr ')' statement
   32       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 64
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 37

   30 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 65
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 38

   45 call: TOK_IDENT . '(' ')'
   46     | TOK_IDENT . '(' expr ')'
   47 variable: TOK_IDENT .

    '('  shift, and go to state 45

    $default  reduce using rule 47 (variable)


State 39

   33 return: TOK_RETURN ';' .

    $default  reduce using rule 33 (return)


State 40

   34 return: TOK_RETURN expr . ';'
   35 expr: expr . BINOP expr
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ';'  shift, and go to state 66
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 41

    4 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    5          | TOK_STRUCT TOK_IDENT . '{' fielddecl '}'
    6          | TOK_STRUCT TOK_IDENT . '{' fielddecl ';' fielddecl '}'

    '{'  shift, and go to state 67


State 42

   12 basetype: TOK_STRING .
   43 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 68

    $default  reduce using rule 12 (basetype)


State 43

   13 basetype: TOK_IDENT .
   42 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 69

    $default  reduce using rule 13 (basetype)


State 44

   44 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 70


State 45

   45 call: TOK_IDENT '(' . ')'
   46     | TOK_IDENT '(' . expr ')'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18
    ')'            shift, and go to state 71

    expr       go to state 72
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 46

   20 block: '{' '}' .

    $default  reduce using rule 20 (block)


State 47

   29 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 53


State 48

   21 block: '{' statement . '}'

    '}'  shift, and go to state 73


State 49

   35 expr: expr . BINOP expr
   39     | '(' expr . ')'
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ')'  shift, and go to state 74
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 50

    0 $accept: program $end .

    $default  accept


State 51

   19 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 75


State 52

   18 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 18 (identdecl)


State 53

   29 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 76
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 54

   14 function: identdecl '(' . ')' block
   15         | identdecl '(' . params ')' block

    TOK_VOID    shift, and go to state 1
    TOK_CHAR    shift, and go to state 2
    TOK_INT     shift, and go to state 3
    TOK_STRING  shift, and go to state 4
    TOK_IDENT   shift, and go to state 77
    ')'         shift, and go to state 78

    basetype   go to state 21
    params     go to state 79
    identdecl  go to state 80


State 55

   55 BINOP: '+' .

    $default  reduce using rule 55 (BINOP)


State 56

   56 BINOP: '-' .

    $default  reduce using rule 56 (BINOP)


State 57

   57 BINOP: '*' .

    $default  reduce using rule 57 (BINOP)


State 58

   58 BINOP: '/' .

    $default  reduce using rule 58 (BINOP)


State 59

   28 statement: expr ';' .

    $default  reduce using rule 28 (statement)


State 60

   48 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 81
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 61

   49 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 82


State 62

   35 expr: expr BINOP . expr

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 83
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 63

   35 expr: expr . BINOP expr
   36     | UNOP expr .
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    '+'       [reduce using rule 36 (expr)]
    '-'       [reduce using rule 36 (expr)]
    '*'       [reduce using rule 36 (expr)]
    '/'       [reduce using rule 36 (expr)]
    '['       [reduce using rule 36 (expr)]
    '.'       [reduce using rule 36 (expr)]
    $default  reduce using rule 36 (expr)

    BINOP  go to state 62


State 64

   31 ifelse: TOK_IF '(' expr . ')' statement
   32       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   35 expr: expr . BINOP expr
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ')'  shift, and go to state 84
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 65

   30 while: TOK_WHILE '(' expr . ')' statement
   35 expr: expr . BINOP expr
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ')'  shift, and go to state 85
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 66

   34 return: TOK_RETURN expr ';' .

    $default  reduce using rule 34 (return)


State 67

    4 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    5          | TOK_STRUCT TOK_IDENT '{' . fielddecl '}'
    6          | TOK_STRUCT TOK_IDENT '{' . fielddecl ';' fielddecl '}'

    TOK_VOID    shift, and go to state 1
    TOK_CHAR    shift, and go to state 2
    TOK_INT     shift, and go to state 3
    TOK_STRING  shift, and go to state 4
    TOK_IDENT   shift, and go to state 77
    '}'         shift, and go to state 86

    fielddecl  go to state 87
    basetype   go to state 88


State 68

   43 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 89
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 69

   42 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 90


State 70

   44 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 38
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '('            shift, and go to state 18

    expr       go to state 91
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 71

   45 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 45 (call)


State 72

   35 expr: expr . BINOP expr
   46 call: TOK_IDENT '(' expr . ')'
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ')'  shift, and go to state 92
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 73

   21 block: '{' statement '}' .

    $default  reduce using rule 21 (block)


State 74

   39 expr: '(' expr ')' .

    $default  reduce using rule 39 (expr)


State 75

   19 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 19 (identdecl)


State 76

   29 vardecl: identdecl '=' expr . ';'
   35 expr: expr . BINOP expr
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ';'  shift, and go to state 93
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 77

   13 basetype: TOK_IDENT .

    $default  reduce using rule 13 (basetype)


State 78

   14 function: identdecl '(' ')' . block

    '{'  shift, and go to state 16
    ';'  shift, and go to state 17

    block  go to state 94


State 79

   15 function: identdecl '(' params . ')' block
   17 params: params . ',' identdecl

    ')'  shift, and go to state 95
    ','  shift, and go to state 96


State 80

   16 params: identdecl .

    $default  reduce using rule 16 (params)


State 81

   35 expr: expr . BINOP expr
   48 variable: expr . '[' expr ']'
   48         | expr '[' expr . ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    '['  shift, and go to state 60
    ']'  shift, and go to state 97
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 82

   49 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 49 (variable)


State 83

   35 expr: expr . BINOP expr
   35     | expr BINOP expr .
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    '+'       [reduce using rule 35 (expr)]
    '-'       [reduce using rule 35 (expr)]
    '*'       [reduce using rule 35 (expr)]
    '/'       [reduce using rule 35 (expr)]
    '['       [reduce using rule 35 (expr)]
    '.'       [reduce using rule 35 (expr)]
    $default  reduce using rule 35 (expr)

    BINOP  go to state 62


State 84

   31 ifelse: TOK_IF '(' expr ')' . statement
   32       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 1
    TOK_CHAR       shift, and go to state 2
    TOK_INT        shift, and go to state 3
    TOK_STRING     shift, and go to state 4
    TOK_IF         shift, and go to state 5
    TOK_WHILE      shift, and go to state 6
    TOK_RETURN     shift, and go to state 7
    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '{'            shift, and go to state 16
    ';'            shift, and go to state 17
    '('            shift, and go to state 18

    basetype   go to state 21
    identdecl  go to state 47
    block      go to state 24
    statement  go to state 98
    vardecl    go to state 26
    while      go to state 27
    ifelse     go to state 28
    return     go to state 29
    expr       go to state 30
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 85

   30 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 1
    TOK_CHAR       shift, and go to state 2
    TOK_INT        shift, and go to state 3
    TOK_STRING     shift, and go to state 4
    TOK_IF         shift, and go to state 5
    TOK_WHILE      shift, and go to state 6
    TOK_RETURN     shift, and go to state 7
    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '{'            shift, and go to state 16
    ';'            shift, and go to state 17
    '('            shift, and go to state 18

    basetype   go to state 21
    identdecl  go to state 47
    block      go to state 24
    statement  go to state 99
    vardecl    go to state 26
    while      go to state 27
    ifelse     go to state 28
    return     go to state 29
    expr       go to state 30
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 86

    4 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 4 (structdef)


State 87

    5 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl . '}'
    6          | TOK_STRUCT TOK_IDENT '{' fielddecl . ';' fielddecl '}'

    '}'  shift, and go to state 100
    ';'  shift, and go to state 101


State 88

    7 fielddecl: basetype . TOK_IDENT
    8          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 102
    TOK_IDENT  shift, and go to state 103


State 89

   35 expr: expr . BINOP expr
   43 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    ')'  shift, and go to state 104
    '['  shift, and go to state 60
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 90

   42 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 42 (allocator)


State 91

   35 expr: expr . BINOP expr
   44 allocator: TOK_NEW basetype '[' expr . ']'
   48 variable: expr . '[' expr ']'
   49         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 55
    '-'  shift, and go to state 56
    '*'  shift, and go to state 57
    '/'  shift, and go to state 58
    '['  shift, and go to state 60
    ']'  shift, and go to state 105
    '.'  shift, and go to state 61

    BINOP  go to state 62


State 92

   46 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 46 (call)


State 93

   29 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 29 (vardecl)


State 94

   14 function: identdecl '(' ')' block .

    $default  reduce using rule 14 (function)


State 95

   15 function: identdecl '(' params ')' . block

    '{'  shift, and go to state 16
    ';'  shift, and go to state 17

    block  go to state 106


State 96

   17 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 1
    TOK_CHAR    shift, and go to state 2
    TOK_INT     shift, and go to state 3
    TOK_STRING  shift, and go to state 4
    TOK_IDENT   shift, and go to state 77

    basetype   go to state 21
    identdecl  go to state 107


State 97

   48 variable: expr '[' expr ']' .

    $default  reduce using rule 48 (variable)


State 98

   31 ifelse: TOK_IF '(' expr ')' statement .
   32       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 108

    $default  reduce using rule 31 (ifelse)


State 99

   30 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 30 (while)


State 100

    5 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl '}' .

    $default  reduce using rule 5 (structdef)


State 101

    6 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' . fielddecl '}'

    TOK_VOID    shift, and go to state 1
    TOK_CHAR    shift, and go to state 2
    TOK_INT     shift, and go to state 3
    TOK_STRING  shift, and go to state 4
    TOK_IDENT   shift, and go to state 77

    fielddecl  go to state 109
    basetype   go to state 88


State 102

    8 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 110


State 103

    7 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 7 (fielddecl)


State 104

   43 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 43 (allocator)


State 105

   44 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 44 (allocator)


State 106

   15 function: identdecl '(' params ')' block .

    $default  reduce using rule 15 (function)


State 107

   17 params: params ',' identdecl .

    $default  reduce using rule 17 (params)


State 108

   32 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 1
    TOK_CHAR       shift, and go to state 2
    TOK_INT        shift, and go to state 3
    TOK_STRING     shift, and go to state 4
    TOK_IF         shift, and go to state 5
    TOK_WHILE      shift, and go to state 6
    TOK_RETURN     shift, and go to state 7
    TOK_NULL       shift, and go to state 9
    TOK_NEW        shift, and go to state 10
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    '-'            shift, and go to state 15
    '{'            shift, and go to state 16
    ';'            shift, and go to state 17
    '('            shift, and go to state 18

    basetype   go to state 21
    identdecl  go to state 47
    block      go to state 24
    statement  go to state 111
    vardecl    go to state 26
    while      go to state 27
    ifelse     go to state 28
    return     go to state 29
    expr       go to state 30
    allocator  go to state 31
    call       go to state 32
    variable   go to state 33
    constant   go to state 34
    UNOP       go to state 35


State 109

    6 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl . '}'

    '}'  shift, and go to state 112


State 110

    8 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 8 (fielddecl)


State 111

   32 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 32 (ifelse)


State 112

    6 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl '}' .

    $default  reduce using rule 6 (structdef)
