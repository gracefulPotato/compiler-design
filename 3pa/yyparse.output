Terminals unused in grammar

   ROOT
   FUNCTION
   DECL
   END_OF_FILE
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   NEG
   POS


Rules useless in parser due to conflicts

   71 token: ';'


State 4 conflicts: 2 reduce/reduce
State 5 conflicts: 2 reduce/reduce
State 6 conflicts: 2 reduce/reduce
State 7 conflicts: 2 reduce/reduce
State 8 conflicts: 1 shift/reduce
State 10 conflicts: 1 shift/reduce
State 11 conflicts: 9 shift/reduce
State 12 conflicts: 1 shift/reduce
State 13 conflicts: 8 reduce/reduce
State 14 conflicts: 5 shift/reduce
State 22 conflicts: 1 shift/reduce, 10 reduce/reduce
State 23 conflicts: 8 reduce/reduce
State 24 conflicts: 8 reduce/reduce
State 25 conflicts: 8 reduce/reduce
State 31 conflicts: 8 reduce/reduce
State 36 conflicts: 18 shift/reduce
State 38 conflicts: 42 reduce/reduce
State 39 conflicts: 8 shift/reduce
State 107 conflicts: 7 shift/reduce
State 128 conflicts: 7 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program function
    3        | program structdef
    4        | program statement
    5        | program token
    6        | /* empty */

    7 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    8          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' '}'
    9          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl '}'

   10 fielddecl: basetype TOK_IDENT
   11          | basetype TOK_ARRAY TOK_IDENT

   12 function: identdecl '(' ')' block
   13         | identdecl '(' params ')' block

   14 params: identdecl
   15       | params ',' identdecl

   16 identdecl: basetype TOK_IDENT
   17          | basetype TOK_ARRAY TOK_IDENT

   18 basetype: TOK_VOID
   19         | TOK_CHAR
   20         | TOK_INT
   21         | TOK_STRING
   22         | TOK_IDENT

   23 block: '{' '}'
   24      | '{' blockrec '}'
   25      | ';'

   26 blockrec: blockrec statement
   27         | statement

   28 statement: block
   29          | vardecl
   30          | while
   31          | ifelse
   32          | return
   33          | expr ';'

   34 vardecl: identdecl '=' expr ';'

   35 while: TOK_WHILE '(' expr ')' statement

   36 ifelse: TOK_IF '(' expr ')' statement
   37       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   38 return: TOK_RETURN ';'
   39       | TOK_RETURN expr ';'

   40 expr: expr BINOP expr
   41     | UNOP expr
   42     | allocator
   43     | call
   44     | '(' expr ')'
   45     | variable
   46     | constant

   47 allocator: TOK_NEW TOK_IDENT '(' ')'
   48          | TOK_NEW TOK_STRING '(' expr ')'
   49          | TOK_NEW basetype '[' expr ']'

   50 call: TOK_IDENT '(' ')'
   51     | TOK_IDENT '(' expr ')'

   52 variable: TOK_IDENT
   53         | expr '[' expr ']'
   54         | expr '.' TOK_IDENT

   55 constant: TOK_INTCON
   56         | TOK_CHARCON
   57         | TOK_STRINGCON
   58         | TOK_NULL

   59 UNOP: '-'

   60 BINOP: '+'
   61      | '='
   62      | '-'
   63      | '*'
   64      | '/'

   65 token: '('
   66      | ')'
   67      | '['
   68      | ']'
   69      | '{'
   70      | '}'
   71      | ';'
   72      | ','
   73      | '.'
   74      | '='
   75      | '+'
   76      | '-'
   77      | '*'
   78      | '/'
   79      | '%'
   80      | '!'
   81      | TOK_VOID
   82      | TOK_CHAR
   83      | TOK_INT
   84      | TOK_STRING
   85      | TOK_IF
   86      | TOK_ELSE
   87      | TOK_WHILE
   88      | TOK_RETURN
   89      | TOK_STRUCT
   90      | TOK_NULL
   91      | TOK_NEW
   92      | TOK_ARRAY
   93      | TOK_EQ
   94      | TOK_NE
   95      | TOK_LT
   96      | TOK_LE
   97      | TOK_GT
   98      | TOK_GE
   99      | TOK_IDENT
  100      | TOK_INTCON
  101      | TOK_CHARCON
  102      | TOK_STRINGCON
  103      | TOK_ORD
  104      | TOK_CHR
  105      | TOK_ROOT


Terminals, with rules where they appear

$end (0) 0
'!' (33) 80
'%' (37) 79
'(' (40) 12 13 35 36 37 44 47 48 50 51 65
')' (41) 12 13 35 36 37 44 47 48 50 51 66
'*' (42) 63 77
'+' (43) 60 75
',' (44) 15 72
'-' (45) 59 62 76
'.' (46) 54 73
'/' (47) 64 78
';' (59) 8 9 25 33 34 38 39 71
'=' (61) 34 61 74
'[' (91) 49 53 67
']' (93) 49 53 68
'{' (123) 7 8 9 23 24 69
'}' (125) 7 8 9 23 24 70
error (256)
ROOT (258)
FUNCTION (259)
DECL (260)
END_OF_FILE (261)
TOK_VOID (262) 18 81
TOK_CHAR (263) 19 82
TOK_INT (264) 20 83
TOK_STRING (265) 21 48 84
TOK_IF (266) 36 37 85
TOK_ELSE (267) 37 86
TOK_WHILE (268) 35 87
TOK_RETURN (269) 38 39 88
TOK_STRUCT (270) 7 8 9 89
TOK_NULL (271) 58 90
TOK_NEW (272) 47 48 49 91
TOK_ARRAY (273) 11 17 92
TOK_EQ (274) 93
TOK_NE (275) 94
TOK_LT (276) 95
TOK_LE (277) 96
TOK_GT (278) 97
TOK_GE (279) 98
TOK_IDENT (280) 7 8 9 10 11 16 17 22 47 50 51 52 54 99
TOK_INTCON (281) 55 100
TOK_CHARCON (282) 56 101
TOK_STRINGCON (283) 57 102
TOK_BLOCK (284)
TOK_CALL (285)
TOK_IFELSE (286)
TOK_INITDECL (287)
TOK_POS (288)
TOK_NEG (289)
TOK_NEWARRAY (290)
TOK_TYPEID (291)
TOK_FIELD (292)
TOK_ORD (293) 103
TOK_CHR (294) 104
TOK_ROOT (295) 105
NEG (296)
POS (297)


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
start (60)
    on left: 1, on right: 0
program (61)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (62)
    on left: 7 8 9, on right: 3
fielddecl (63)
    on left: 10 11, on right: 8 9
function (64)
    on left: 12 13, on right: 2
params (65)
    on left: 14 15, on right: 13 15
identdecl (66)
    on left: 16 17, on right: 12 13 14 15 34
basetype (67)
    on left: 18 19 20 21 22, on right: 10 11 16 17 49
block (68)
    on left: 23 24 25, on right: 12 13 28
blockrec (69)
    on left: 26 27, on right: 24 26
statement (70)
    on left: 28 29 30 31 32 33, on right: 4 26 27 35 36 37
vardecl (71)
    on left: 34, on right: 29
while (72)
    on left: 35, on right: 30
ifelse (73)
    on left: 36 37, on right: 31
return (74)
    on left: 38 39, on right: 32
expr (75)
    on left: 40 41 42 43 44 45 46, on right: 33 34 35 36 37 39 40 41
    44 48 49 51 53 54
allocator (76)
    on left: 47 48 49, on right: 42
call (77)
    on left: 50 51, on right: 43
variable (78)
    on left: 52 53 54, on right: 45
constant (79)
    on left: 55 56 57 58, on right: 46
UNOP (80)
    on left: 59, on right: 41
BINOP (81)
    on left: 60 61 62 63 64, on right: 40
token (82)
    on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
    83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
    103 104 105, on right: 5


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . function
    3        | program . structdef
    4        | program . statement
    5        | program . token

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_ARRAY      shift, and go to state 15
    TOK_EQ         shift, and go to state 16
    TOK_NE         shift, and go to state 17
    TOK_LT         shift, and go to state 18
    TOK_LE         shift, and go to state 19
    TOK_GT         shift, and go to state 20
    TOK_GE         shift, and go to state 21
    TOK_IDENT      shift, and go to state 22
    TOK_INTCON     shift, and go to state 23
    TOK_CHARCON    shift, and go to state 24
    TOK_STRINGCON  shift, and go to state 25
    TOK_ORD        shift, and go to state 26
    TOK_CHR        shift, and go to state 27
    TOK_ROOT       shift, and go to state 28
    '='            shift, and go to state 29
    '+'            shift, and go to state 30
    '-'            shift, and go to state 31
    '*'            shift, and go to state 32
    '/'            shift, and go to state 33
    '%'            shift, and go to state 34
    '!'            shift, and go to state 35
    '{'            shift, and go to state 36
    '}'            shift, and go to state 37
    ';'            shift, and go to state 38
    '('            shift, and go to state 39
    ')'            shift, and go to state 40
    ','            shift, and go to state 41
    '['            shift, and go to state 42
    ']'            shift, and go to state 43
    '.'            shift, and go to state 44

    $default  reduce using rule 1 (start)

    structdef  go to state 45
    function   go to state 46
    identdecl  go to state 47
    basetype   go to state 48
    block      go to state 49
    statement  go to state 50
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60
    token      go to state 61


State 3

    0 $accept: start $end .

    $default  accept


State 4

   18 basetype: TOK_VOID .
   81 token: TOK_VOID .

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_ARRAY  [reduce using rule 81 (token)]
    TOK_IDENT  reduce using rule 18 (basetype)
    TOK_IDENT  [reduce using rule 81 (token)]
    $default   reduce using rule 81 (token)


State 5

   19 basetype: TOK_CHAR .
   82 token: TOK_CHAR .

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_ARRAY  [reduce using rule 82 (token)]
    TOK_IDENT  reduce using rule 19 (basetype)
    TOK_IDENT  [reduce using rule 82 (token)]
    $default   reduce using rule 82 (token)


State 6

   20 basetype: TOK_INT .
   83 token: TOK_INT .

    TOK_ARRAY  reduce using rule 20 (basetype)
    TOK_ARRAY  [reduce using rule 83 (token)]
    TOK_IDENT  reduce using rule 20 (basetype)
    TOK_IDENT  [reduce using rule 83 (token)]
    $default   reduce using rule 83 (token)


State 7

   21 basetype: TOK_STRING .
   84 token: TOK_STRING .

    TOK_ARRAY  reduce using rule 21 (basetype)
    TOK_ARRAY  [reduce using rule 84 (token)]
    TOK_IDENT  reduce using rule 21 (basetype)
    TOK_IDENT  [reduce using rule 84 (token)]
    $default   reduce using rule 84 (token)


State 8

   36 ifelse: TOK_IF . '(' expr ')' statement
   37       | TOK_IF . '(' expr ')' statement TOK_ELSE statement
   85 token: TOK_IF .

    '('  shift, and go to state 62

    '('       [reduce using rule 85 (token)]
    $default  reduce using rule 85 (token)


State 9

   86 token: TOK_ELSE .

    $default  reduce using rule 86 (token)


State 10

   35 while: TOK_WHILE . '(' expr ')' statement
   87 token: TOK_WHILE .

    '('  shift, and go to state 63

    '('       [reduce using rule 87 (token)]
    $default  reduce using rule 87 (token)


State 11

   38 return: TOK_RETURN . ';'
   39       | TOK_RETURN . expr ';'
   88 token: TOK_RETURN .

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    ';'            shift, and go to state 71
    '('            shift, and go to state 72

    TOK_NULL       [reduce using rule 88 (token)]
    TOK_NEW        [reduce using rule 88 (token)]
    TOK_IDENT      [reduce using rule 88 (token)]
    TOK_INTCON     [reduce using rule 88 (token)]
    TOK_CHARCON    [reduce using rule 88 (token)]
    TOK_STRINGCON  [reduce using rule 88 (token)]
    '-'            [reduce using rule 88 (token)]
    ';'            [reduce using rule 88 (token)]
    '('            [reduce using rule 88 (token)]
    $default       reduce using rule 88 (token)

    expr       go to state 73
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 12

    7 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    8          | TOK_STRUCT . TOK_IDENT '{' fielddecl ';' '}'
    9          | TOK_STRUCT . TOK_IDENT '{' fielddecl ';' fielddecl '}'
   89 token: TOK_STRUCT .

    TOK_IDENT  shift, and go to state 74

    TOK_IDENT  [reduce using rule 89 (token)]
    $default   reduce using rule 89 (token)


State 13

   58 constant: TOK_NULL .
   90 token: TOK_NULL .

    '='       reduce using rule 58 (constant)
    '='       [reduce using rule 90 (token)]
    '+'       reduce using rule 58 (constant)
    '+'       [reduce using rule 90 (token)]
    '-'       reduce using rule 58 (constant)
    '-'       [reduce using rule 90 (token)]
    '*'       reduce using rule 58 (constant)
    '*'       [reduce using rule 90 (token)]
    '/'       reduce using rule 58 (constant)
    '/'       [reduce using rule 90 (token)]
    ';'       reduce using rule 58 (constant)
    ';'       [reduce using rule 90 (token)]
    '['       reduce using rule 58 (constant)
    '['       [reduce using rule 90 (token)]
    '.'       reduce using rule 58 (constant)
    '.'       [reduce using rule 90 (token)]
    $default  reduce using rule 90 (token)


State 14

   47 allocator: TOK_NEW . TOK_IDENT '(' ')'
   48          | TOK_NEW . TOK_STRING '(' expr ')'
   49          | TOK_NEW . basetype '[' expr ']'
   91 token: TOK_NEW .

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 78
    TOK_IDENT   shift, and go to state 79

    TOK_VOID    [reduce using rule 91 (token)]
    TOK_CHAR    [reduce using rule 91 (token)]
    TOK_INT     [reduce using rule 91 (token)]
    TOK_STRING  [reduce using rule 91 (token)]
    TOK_IDENT   [reduce using rule 91 (token)]
    $default    reduce using rule 91 (token)

    basetype  go to state 80


State 15

   92 token: TOK_ARRAY .

    $default  reduce using rule 92 (token)


State 16

   93 token: TOK_EQ .

    $default  reduce using rule 93 (token)


State 17

   94 token: TOK_NE .

    $default  reduce using rule 94 (token)


State 18

   95 token: TOK_LT .

    $default  reduce using rule 95 (token)


State 19

   96 token: TOK_LE .

    $default  reduce using rule 96 (token)


State 20

   97 token: TOK_GT .

    $default  reduce using rule 97 (token)


State 21

   98 token: TOK_GE .

    $default  reduce using rule 98 (token)


State 22

   22 basetype: TOK_IDENT .
   50 call: TOK_IDENT . '(' ')'
   51     | TOK_IDENT . '(' expr ')'
   52 variable: TOK_IDENT .
   99 token: TOK_IDENT .

    '('  shift, and go to state 81

    TOK_ARRAY  reduce using rule 22 (basetype)
    TOK_ARRAY  [reduce using rule 99 (token)]
    TOK_IDENT  reduce using rule 22 (basetype)
    TOK_IDENT  [reduce using rule 99 (token)]
    '='        reduce using rule 52 (variable)
    '='        [reduce using rule 99 (token)]
    '+'        reduce using rule 52 (variable)
    '+'        [reduce using rule 99 (token)]
    '-'        reduce using rule 52 (variable)
    '-'        [reduce using rule 99 (token)]
    '*'        reduce using rule 52 (variable)
    '*'        [reduce using rule 99 (token)]
    '/'        reduce using rule 52 (variable)
    '/'        [reduce using rule 99 (token)]
    ';'        reduce using rule 52 (variable)
    ';'        [reduce using rule 99 (token)]
    '('        [reduce using rule 99 (token)]
    '['        reduce using rule 52 (variable)
    '['        [reduce using rule 99 (token)]
    '.'        reduce using rule 52 (variable)
    '.'        [reduce using rule 99 (token)]
    $default   reduce using rule 99 (token)


State 23

   55 constant: TOK_INTCON .
  100 token: TOK_INTCON .

    '='       reduce using rule 55 (constant)
    '='       [reduce using rule 100 (token)]
    '+'       reduce using rule 55 (constant)
    '+'       [reduce using rule 100 (token)]
    '-'       reduce using rule 55 (constant)
    '-'       [reduce using rule 100 (token)]
    '*'       reduce using rule 55 (constant)
    '*'       [reduce using rule 100 (token)]
    '/'       reduce using rule 55 (constant)
    '/'       [reduce using rule 100 (token)]
    ';'       reduce using rule 55 (constant)
    ';'       [reduce using rule 100 (token)]
    '['       reduce using rule 55 (constant)
    '['       [reduce using rule 100 (token)]
    '.'       reduce using rule 55 (constant)
    '.'       [reduce using rule 100 (token)]
    $default  reduce using rule 100 (token)


State 24

   56 constant: TOK_CHARCON .
  101 token: TOK_CHARCON .

    '='       reduce using rule 56 (constant)
    '='       [reduce using rule 101 (token)]
    '+'       reduce using rule 56 (constant)
    '+'       [reduce using rule 101 (token)]
    '-'       reduce using rule 56 (constant)
    '-'       [reduce using rule 101 (token)]
    '*'       reduce using rule 56 (constant)
    '*'       [reduce using rule 101 (token)]
    '/'       reduce using rule 56 (constant)
    '/'       [reduce using rule 101 (token)]
    ';'       reduce using rule 56 (constant)
    ';'       [reduce using rule 101 (token)]
    '['       reduce using rule 56 (constant)
    '['       [reduce using rule 101 (token)]
    '.'       reduce using rule 56 (constant)
    '.'       [reduce using rule 101 (token)]
    $default  reduce using rule 101 (token)


State 25

   57 constant: TOK_STRINGCON .
  102 token: TOK_STRINGCON .

    '='       reduce using rule 57 (constant)
    '='       [reduce using rule 102 (token)]
    '+'       reduce using rule 57 (constant)
    '+'       [reduce using rule 102 (token)]
    '-'       reduce using rule 57 (constant)
    '-'       [reduce using rule 102 (token)]
    '*'       reduce using rule 57 (constant)
    '*'       [reduce using rule 102 (token)]
    '/'       reduce using rule 57 (constant)
    '/'       [reduce using rule 102 (token)]
    ';'       reduce using rule 57 (constant)
    ';'       [reduce using rule 102 (token)]
    '['       reduce using rule 57 (constant)
    '['       [reduce using rule 102 (token)]
    '.'       reduce using rule 57 (constant)
    '.'       [reduce using rule 102 (token)]
    $default  reduce using rule 102 (token)


State 26

  103 token: TOK_ORD .

    $default  reduce using rule 103 (token)


State 27

  104 token: TOK_CHR .

    $default  reduce using rule 104 (token)


State 28

  105 token: TOK_ROOT .

    $default  reduce using rule 105 (token)


State 29

   74 token: '=' .

    $default  reduce using rule 74 (token)


State 30

   75 token: '+' .

    $default  reduce using rule 75 (token)


State 31

   59 UNOP: '-' .
   76 token: '-' .

    TOK_NULL       reduce using rule 59 (UNOP)
    TOK_NULL       [reduce using rule 76 (token)]
    TOK_NEW        reduce using rule 59 (UNOP)
    TOK_NEW        [reduce using rule 76 (token)]
    TOK_IDENT      reduce using rule 59 (UNOP)
    TOK_IDENT      [reduce using rule 76 (token)]
    TOK_INTCON     reduce using rule 59 (UNOP)
    TOK_INTCON     [reduce using rule 76 (token)]
    TOK_CHARCON    reduce using rule 59 (UNOP)
    TOK_CHARCON    [reduce using rule 76 (token)]
    TOK_STRINGCON  reduce using rule 59 (UNOP)
    TOK_STRINGCON  [reduce using rule 76 (token)]
    '-'            reduce using rule 59 (UNOP)
    '-'            [reduce using rule 76 (token)]
    '('            reduce using rule 59 (UNOP)
    '('            [reduce using rule 76 (token)]
    $default       reduce using rule 76 (token)


State 32

   77 token: '*' .

    $default  reduce using rule 77 (token)


State 33

   78 token: '/' .

    $default  reduce using rule 78 (token)


State 34

   79 token: '%' .

    $default  reduce using rule 79 (token)


State 35

   80 token: '!' .

    $default  reduce using rule 80 (token)


State 36

   23 block: '{' . '}'
   24      | '{' . blockrec '}'
   69 token: '{' .

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    '}'            shift, and go to state 88
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    TOK_VOID       [reduce using rule 69 (token)]
    TOK_CHAR       [reduce using rule 69 (token)]
    TOK_INT        [reduce using rule 69 (token)]
    TOK_STRING     [reduce using rule 69 (token)]
    TOK_IF         [reduce using rule 69 (token)]
    TOK_WHILE      [reduce using rule 69 (token)]
    TOK_RETURN     [reduce using rule 69 (token)]
    TOK_NULL       [reduce using rule 69 (token)]
    TOK_NEW        [reduce using rule 69 (token)]
    TOK_IDENT      [reduce using rule 69 (token)]
    TOK_INTCON     [reduce using rule 69 (token)]
    TOK_CHARCON    [reduce using rule 69 (token)]
    TOK_STRINGCON  [reduce using rule 69 (token)]
    '-'            [reduce using rule 69 (token)]
    '{'            [reduce using rule 69 (token)]
    '}'            [reduce using rule 69 (token)]
    ';'            [reduce using rule 69 (token)]
    '('            [reduce using rule 69 (token)]
    $default       reduce using rule 69 (token)

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    blockrec   go to state 91
    statement  go to state 92
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 37

   70 token: '}' .

    $default  reduce using rule 70 (token)


State 38

   25 block: ';' .
   71 token: ';' .

    $end           reduce using rule 25 (block)
    $end           [reduce using rule 71 (token)]
    TOK_VOID       reduce using rule 25 (block)
    TOK_VOID       [reduce using rule 71 (token)]
    TOK_CHAR       reduce using rule 25 (block)
    TOK_CHAR       [reduce using rule 71 (token)]
    TOK_INT        reduce using rule 25 (block)
    TOK_INT        [reduce using rule 71 (token)]
    TOK_STRING     reduce using rule 25 (block)
    TOK_STRING     [reduce using rule 71 (token)]
    TOK_IF         reduce using rule 25 (block)
    TOK_IF         [reduce using rule 71 (token)]
    TOK_ELSE       reduce using rule 25 (block)
    TOK_ELSE       [reduce using rule 71 (token)]
    TOK_WHILE      reduce using rule 25 (block)
    TOK_WHILE      [reduce using rule 71 (token)]
    TOK_RETURN     reduce using rule 25 (block)
    TOK_RETURN     [reduce using rule 71 (token)]
    TOK_STRUCT     reduce using rule 25 (block)
    TOK_STRUCT     [reduce using rule 71 (token)]
    TOK_NULL       reduce using rule 25 (block)
    TOK_NULL       [reduce using rule 71 (token)]
    TOK_NEW        reduce using rule 25 (block)
    TOK_NEW        [reduce using rule 71 (token)]
    TOK_ARRAY      reduce using rule 25 (block)
    TOK_ARRAY      [reduce using rule 71 (token)]
    TOK_EQ         reduce using rule 25 (block)
    TOK_EQ         [reduce using rule 71 (token)]
    TOK_NE         reduce using rule 25 (block)
    TOK_NE         [reduce using rule 71 (token)]
    TOK_LT         reduce using rule 25 (block)
    TOK_LT         [reduce using rule 71 (token)]
    TOK_LE         reduce using rule 25 (block)
    TOK_LE         [reduce using rule 71 (token)]
    TOK_GT         reduce using rule 25 (block)
    TOK_GT         [reduce using rule 71 (token)]
    TOK_GE         reduce using rule 25 (block)
    TOK_GE         [reduce using rule 71 (token)]
    TOK_IDENT      reduce using rule 25 (block)
    TOK_IDENT      [reduce using rule 71 (token)]
    TOK_INTCON     reduce using rule 25 (block)
    TOK_INTCON     [reduce using rule 71 (token)]
    TOK_CHARCON    reduce using rule 25 (block)
    TOK_CHARCON    [reduce using rule 71 (token)]
    TOK_STRINGCON  reduce using rule 25 (block)
    TOK_STRINGCON  [reduce using rule 71 (token)]
    TOK_ORD        reduce using rule 25 (block)
    TOK_ORD        [reduce using rule 71 (token)]
    TOK_CHR        reduce using rule 25 (block)
    TOK_CHR        [reduce using rule 71 (token)]
    TOK_ROOT       reduce using rule 25 (block)
    TOK_ROOT       [reduce using rule 71 (token)]
    '='            reduce using rule 25 (block)
    '='            [reduce using rule 71 (token)]
    '+'            reduce using rule 25 (block)
    '+'            [reduce using rule 71 (token)]
    '-'            reduce using rule 25 (block)
    '-'            [reduce using rule 71 (token)]
    '*'            reduce using rule 25 (block)
    '*'            [reduce using rule 71 (token)]
    '/'            reduce using rule 25 (block)
    '/'            [reduce using rule 71 (token)]
    '%'            reduce using rule 25 (block)
    '%'            [reduce using rule 71 (token)]
    '!'            reduce using rule 25 (block)
    '!'            [reduce using rule 71 (token)]
    '{'            reduce using rule 25 (block)
    '{'            [reduce using rule 71 (token)]
    '}'            reduce using rule 25 (block)
    '}'            [reduce using rule 71 (token)]
    ';'            reduce using rule 25 (block)
    ';'            [reduce using rule 71 (token)]
    '('            reduce using rule 25 (block)
    '('            [reduce using rule 71 (token)]
    ')'            reduce using rule 25 (block)
    ')'            [reduce using rule 71 (token)]
    ','            reduce using rule 25 (block)
    ','            [reduce using rule 71 (token)]
    '['            reduce using rule 25 (block)
    '['            [reduce using rule 71 (token)]
    ']'            reduce using rule 25 (block)
    ']'            [reduce using rule 71 (token)]
    '.'            reduce using rule 25 (block)
    '.'            [reduce using rule 71 (token)]
    $default       reduce using rule 25 (block)


State 39

   44 expr: '(' . expr ')'
   65 token: '(' .

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    TOK_NULL       [reduce using rule 65 (token)]
    TOK_NEW        [reduce using rule 65 (token)]
    TOK_IDENT      [reduce using rule 65 (token)]
    TOK_INTCON     [reduce using rule 65 (token)]
    TOK_CHARCON    [reduce using rule 65 (token)]
    TOK_STRINGCON  [reduce using rule 65 (token)]
    '-'            [reduce using rule 65 (token)]
    '('            [reduce using rule 65 (token)]
    $default       reduce using rule 65 (token)

    expr       go to state 93
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 40

   66 token: ')' .

    $default  reduce using rule 66 (token)


State 41

   72 token: ',' .

    $default  reduce using rule 72 (token)


State 42

   67 token: '[' .

    $default  reduce using rule 67 (token)


State 43

   68 token: ']' .

    $default  reduce using rule 68 (token)


State 44

   73 token: '.' .

    $default  reduce using rule 73 (token)


State 45

    3 program: program structdef .

    $default  reduce using rule 3 (program)


State 46

    2 program: program function .

    $default  reduce using rule 2 (program)


State 47

   12 function: identdecl . '(' ')' block
   13         | identdecl . '(' params ')' block
   34 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 94
    '('  shift, and go to state 95


State 48

   16 identdecl: basetype . TOK_IDENT
   17          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 96
    TOK_IDENT  shift, and go to state 97


State 49

   28 statement: block .

    $default  reduce using rule 28 (statement)


State 50

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 51

   29 statement: vardecl .

    $default  reduce using rule 29 (statement)


State 52

   30 statement: while .

    $default  reduce using rule 30 (statement)


State 53

   31 statement: ifelse .

    $default  reduce using rule 31 (statement)


State 54

   32 statement: return .

    $default  reduce using rule 32 (statement)


State 55

   33 statement: expr . ';'
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ';'  shift, and go to state 103
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 56

   42 expr: allocator .

    $default  reduce using rule 42 (expr)


State 57

   43 expr: call .

    $default  reduce using rule 43 (expr)


State 58

   45 expr: variable .

    $default  reduce using rule 45 (expr)


State 59

   46 expr: constant .

    $default  reduce using rule 46 (expr)


State 60

   41 expr: UNOP . expr

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 107
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 61

    5 program: program token .

    $default  reduce using rule 5 (program)


State 62

   36 ifelse: TOK_IF '(' . expr ')' statement
   37       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 108
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 63

   35 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 109
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 64

   58 constant: TOK_NULL .

    $default  reduce using rule 58 (constant)


State 65

   47 allocator: TOK_NEW . TOK_IDENT '(' ')'
   48          | TOK_NEW . TOK_STRING '(' expr ')'
   49          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 78
    TOK_IDENT   shift, and go to state 79

    basetype  go to state 80


State 66

   50 call: TOK_IDENT . '(' ')'
   51     | TOK_IDENT . '(' expr ')'
   52 variable: TOK_IDENT .

    '('  shift, and go to state 81

    $default  reduce using rule 52 (variable)


State 67

   55 constant: TOK_INTCON .

    $default  reduce using rule 55 (constant)


State 68

   56 constant: TOK_CHARCON .

    $default  reduce using rule 56 (constant)


State 69

   57 constant: TOK_STRINGCON .

    $default  reduce using rule 57 (constant)


State 70

   59 UNOP: '-' .

    $default  reduce using rule 59 (UNOP)


State 71

   38 return: TOK_RETURN ';' .

    $default  reduce using rule 38 (return)


State 72

   44 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 93
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 73

   39 return: TOK_RETURN expr . ';'
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ';'  shift, and go to state 110
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 74

    7 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    8          | TOK_STRUCT TOK_IDENT . '{' fielddecl ';' '}'
    9          | TOK_STRUCT TOK_IDENT . '{' fielddecl ';' fielddecl '}'

    '{'  shift, and go to state 111


State 75

   18 basetype: TOK_VOID .

    $default  reduce using rule 18 (basetype)


State 76

   19 basetype: TOK_CHAR .

    $default  reduce using rule 19 (basetype)


State 77

   20 basetype: TOK_INT .

    $default  reduce using rule 20 (basetype)


State 78

   21 basetype: TOK_STRING .
   48 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 112

    $default  reduce using rule 21 (basetype)


State 79

   22 basetype: TOK_IDENT .
   47 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 113

    $default  reduce using rule 22 (basetype)


State 80

   49 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 114


State 81

   50 call: TOK_IDENT '(' . ')'
   51     | TOK_IDENT '(' . expr ')'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72
    ')'            shift, and go to state 115

    expr       go to state 116
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 82

   21 basetype: TOK_STRING .

    $default  reduce using rule 21 (basetype)


State 83

   36 ifelse: TOK_IF . '(' expr ')' statement
   37       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 62


State 84

   35 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 63


State 85

   38 return: TOK_RETURN . ';'
   39       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    ';'            shift, and go to state 71
    '('            shift, and go to state 72

    expr       go to state 73
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 86

   22 basetype: TOK_IDENT .
   50 call: TOK_IDENT . '(' ')'
   51     | TOK_IDENT . '(' expr ')'
   52 variable: TOK_IDENT .

    '('  shift, and go to state 81

    TOK_ARRAY  reduce using rule 22 (basetype)
    TOK_IDENT  reduce using rule 22 (basetype)
    $default   reduce using rule 52 (variable)


State 87

   23 block: '{' . '}'
   24      | '{' . blockrec '}'

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    '}'            shift, and go to state 88
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    blockrec   go to state 91
    statement  go to state 92
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 88

   23 block: '{' '}' .

    $default  reduce using rule 23 (block)


State 89

   25 block: ';' .

    $default  reduce using rule 25 (block)


State 90

   34 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 94


State 91

   24 block: '{' blockrec . '}'
   26 blockrec: blockrec . statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    '}'            shift, and go to state 117
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 118
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 92

   27 blockrec: statement .

    $default  reduce using rule 27 (blockrec)


State 93

   40 expr: expr . BINOP expr
   44     | '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ')'  shift, and go to state 119
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 94

   34 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 120
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 95

   12 function: identdecl '(' . ')' block
   13         | identdecl '(' . params ')' block

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 121
    ')'         shift, and go to state 122

    params     go to state 123
    identdecl  go to state 124
    basetype   go to state 48


State 96

   17 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 125


State 97

   16 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 16 (identdecl)


State 98

   61 BINOP: '=' .

    $default  reduce using rule 61 (BINOP)


State 99

   60 BINOP: '+' .

    $default  reduce using rule 60 (BINOP)


State 100

   62 BINOP: '-' .

    $default  reduce using rule 62 (BINOP)


State 101

   63 BINOP: '*' .

    $default  reduce using rule 63 (BINOP)


State 102

   64 BINOP: '/' .

    $default  reduce using rule 64 (BINOP)


State 103

   33 statement: expr ';' .

    $default  reduce using rule 33 (statement)


State 104

   53 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 126
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 105

   54 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 127


State 106

   40 expr: expr BINOP . expr

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 128
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 107

   40 expr: expr . BINOP expr
   41     | UNOP expr .
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    '='       [reduce using rule 41 (expr)]
    '+'       [reduce using rule 41 (expr)]
    '-'       [reduce using rule 41 (expr)]
    '*'       [reduce using rule 41 (expr)]
    '/'       [reduce using rule 41 (expr)]
    '['       [reduce using rule 41 (expr)]
    '.'       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)

    BINOP  go to state 106


State 108

   36 ifelse: TOK_IF '(' expr . ')' statement
   37       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ')'  shift, and go to state 129
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 109

   35 while: TOK_WHILE '(' expr . ')' statement
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ')'  shift, and go to state 130
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 110

   39 return: TOK_RETURN expr ';' .

    $default  reduce using rule 39 (return)


State 111

    7 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    8          | TOK_STRUCT TOK_IDENT '{' . fielddecl ';' '}'
    9          | TOK_STRUCT TOK_IDENT '{' . fielddecl ';' fielddecl '}'

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 121
    '}'         shift, and go to state 131

    fielddecl  go to state 132
    basetype   go to state 133


State 112

   48 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 134
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 113

   47 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 135


State 114

   49 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 136
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 115

   50 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 50 (call)


State 116

   40 expr: expr . BINOP expr
   51 call: TOK_IDENT '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ')'  shift, and go to state 137
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 117

   24 block: '{' blockrec '}' .

    $default  reduce using rule 24 (block)


State 118

   26 blockrec: blockrec statement .

    $default  reduce using rule 26 (blockrec)


State 119

   44 expr: '(' expr ')' .

    $default  reduce using rule 44 (expr)


State 120

   34 vardecl: identdecl '=' expr . ';'
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ';'  shift, and go to state 138
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 121

   22 basetype: TOK_IDENT .

    $default  reduce using rule 22 (basetype)


State 122

   12 function: identdecl '(' ')' . block

    '{'  shift, and go to state 87
    ';'  shift, and go to state 89

    block  go to state 139


State 123

   13 function: identdecl '(' params . ')' block
   15 params: params . ',' identdecl

    ')'  shift, and go to state 140
    ','  shift, and go to state 141


State 124

   14 params: identdecl .

    $default  reduce using rule 14 (params)


State 125

   17 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 17 (identdecl)


State 126

   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   53         | expr '[' expr . ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    '['  shift, and go to state 104
    ']'  shift, and go to state 142
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 127

   54 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 54 (variable)


State 128

   40 expr: expr . BINOP expr
   40     | expr BINOP expr .
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    '='       [reduce using rule 40 (expr)]
    '+'       [reduce using rule 40 (expr)]
    '-'       [reduce using rule 40 (expr)]
    '*'       [reduce using rule 40 (expr)]
    '/'       [reduce using rule 40 (expr)]
    '['       [reduce using rule 40 (expr)]
    '.'       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)

    BINOP  go to state 106


State 129

   36 ifelse: TOK_IF '(' expr ')' . statement
   37       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 143
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 130

   35 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 144
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 131

    7 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 7 (structdef)


State 132

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl . ';' '}'
    9          | TOK_STRUCT TOK_IDENT '{' fielddecl . ';' fielddecl '}'

    ';'  shift, and go to state 145


State 133

   10 fielddecl: basetype . TOK_IDENT
   11          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 146
    TOK_IDENT  shift, and go to state 147


State 134

   40 expr: expr . BINOP expr
   48 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    ')'  shift, and go to state 148
    '['  shift, and go to state 104
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 135

   47 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 47 (allocator)


State 136

   40 expr: expr . BINOP expr
   49 allocator: TOK_NEW basetype '[' expr . ']'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    '='  shift, and go to state 98
    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102
    '['  shift, and go to state 104
    ']'  shift, and go to state 149
    '.'  shift, and go to state 105

    BINOP  go to state 106


State 137

   51 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 51 (call)


State 138

   34 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


State 139

   12 function: identdecl '(' ')' block .

    $default  reduce using rule 12 (function)


State 140

   13 function: identdecl '(' params ')' . block

    '{'  shift, and go to state 87
    ';'  shift, and go to state 89

    block  go to state 150


State 141

   15 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 121

    identdecl  go to state 151
    basetype   go to state 48


State 142

   53 variable: expr '[' expr ']' .

    $default  reduce using rule 53 (variable)


State 143

   36 ifelse: TOK_IF '(' expr ')' statement .
   37       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 152

    $default  reduce using rule 36 (ifelse)


State 144

   35 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


State 145

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' . '}'
    9          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' . fielddecl '}'

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 121
    '}'         shift, and go to state 153

    fielddecl  go to state 154
    basetype   go to state 133


State 146

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 155


State 147

   10 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 10 (fielddecl)


State 148

   48 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 48 (allocator)


State 149

   49 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 49 (allocator)


State 150

   13 function: identdecl '(' params ')' block .

    $default  reduce using rule 13 (function)


State 151

   15 params: params ',' identdecl .

    $default  reduce using rule 15 (params)


State 152

   37 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 156
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 153

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' '}' .

    $default  reduce using rule 8 (structdef)


State 154

    9 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl . '}'

    '}'  shift, and go to state 157


State 155

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


State 156

   37 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 37 (ifelse)


State 157

    9 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl '}' .

    $default  reduce using rule 9 (structdef)
