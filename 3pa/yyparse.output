Terminals unused in grammar

   ROOT
   FUNCTION
   DECL
   PARAM
   DECLID
   BLOCK
   VARDECL
   CALL
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   NEG
   POS


Rules useless in parser due to conflicts

   79 token: ';'


State 4 conflicts: 2 reduce/reduce
State 5 conflicts: 2 reduce/reduce
State 6 conflicts: 2 reduce/reduce
State 7 conflicts: 2 reduce/reduce
State 8 conflicts: 1 shift/reduce
State 10 conflicts: 1 shift/reduce
State 11 conflicts: 9 shift/reduce
State 12 conflicts: 1 shift/reduce
State 13 conflicts: 14 reduce/reduce
State 14 conflicts: 5 shift/reduce
State 22 conflicts: 1 shift/reduce, 16 reduce/reduce
State 23 conflicts: 14 reduce/reduce
State 24 conflicts: 14 reduce/reduce
State 25 conflicts: 14 reduce/reduce
State 31 conflicts: 8 reduce/reduce
State 38 conflicts: 18 shift/reduce
State 40 conflicts: 42 reduce/reduce
State 41 conflicts: 8 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 6 shift/reduce
State 113 conflicts: 13 shift/reduce
State 134 conflicts: 13 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program function
    3        | program structdef
    4        | program statement
    5        | program token
    6        | /* empty */

    7 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    8          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' '}'
    9          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl '}'

   10 fielddecl: basetype TOK_IDENT
   11          | basetype TOK_ARRAY TOK_IDENT

   12 function: identdecl '(' ')' block
   13         | identdecl '(' params ')' block

   14 params: identdecl
   15       | params ',' identdecl

   16 identdecl: basetype TOK_IDENT
   17          | basetype TOK_ARRAY TOK_IDENT

   18 basetype: TOK_VOID
   19         | TOK_CHAR
   20         | TOK_INT
   21         | TOK_STRING
   22         | TOK_IDENT

   23 block: '{' '}'
   24      | '{' blockrec '}'
   25      | ';'

   26 blockrec: blockrec statement
   27         | statement

   28 statement: block
   29          | vardecl
   30          | while
   31          | ifelse
   32          | return
   33          | expr ';'

   34 vardecl: identdecl '=' expr ';'

   35 while: TOK_WHILE '(' expr ')' statement

   36 ifelse: TOK_IF '(' expr ')' statement
   37       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   38 return: TOK_RETURN ';'
   39       | TOK_RETURN expr ';'

   40 expr: expr BINOP expr
   41     | UNOP expr
   42     | allocator
   43     | call
   44     | '(' expr ')'
   45     | variable
   46     | constant

   47 allocator: TOK_NEW TOK_IDENT '(' ')'
   48          | TOK_NEW TOK_STRING '(' expr ')'
   49          | TOK_NEW basetype '[' expr ']'

   50 call: TOK_IDENT '(' ')'
   51     | TOK_IDENT '(' expr ')'

   52 variable: TOK_IDENT
   53         | expr '[' expr ']'
   54         | expr '.' TOK_IDENT

   55 constant: TOK_INTCON
   56         | TOK_CHARCON
   57         | TOK_STRINGCON
   58         | TOK_NULL

   59 UNOP: '-'

   60 BINOP: '+'
   61      | '='
   62      | '-'
   63      | '*'
   64      | '/'
   65      | TOK_NE
   66      | TOK_EQ
   67      | TOK_LT
   68      | TOK_LE
   69      | TOK_GT
   70      | TOK_GE
   71      | '.'
   72      | '['

   73 token: '('
   74      | ')'
   75      | '['
   76      | ']'
   77      | '{'
   78      | '}'
   79      | ';'
   80      | ','
   81      | '.'
   82      | '='
   83      | '+'
   84      | '-'
   85      | '*'
   86      | '/'
   87      | '%'
   88      | '!'
   89      | TOK_VOID
   90      | TOK_CHAR
   91      | TOK_INT
   92      | TOK_STRING
   93      | TOK_IF
   94      | TOK_ELSE
   95      | TOK_WHILE
   96      | TOK_RETURN
   97      | TOK_STRUCT
   98      | TOK_NULL
   99      | TOK_NEW
  100      | TOK_ARRAY
  101      | TOK_EQ
  102      | TOK_NE
  103      | TOK_LT
  104      | TOK_LE
  105      | TOK_GT
  106      | TOK_GE
  107      | TOK_IDENT
  108      | TOK_INTCON
  109      | TOK_CHARCON
  110      | TOK_STRINGCON
  111      | TOK_ORD
  112      | TOK_CHR
  113      | TOK_ROOT


Terminals, with rules where they appear

$end (0) 0
'!' (33) 88
'%' (37) 87
'(' (40) 12 13 35 36 37 44 47 48 50 51 73
')' (41) 12 13 35 36 37 44 47 48 50 51 74
'*' (42) 63 85
'+' (43) 60 83
',' (44) 15 80
'-' (45) 59 62 84
'.' (46) 54 71 81
'/' (47) 64 86
';' (59) 8 9 25 33 34 38 39 79
'=' (61) 34 61 82
'[' (91) 49 53 72 75
']' (93) 49 53 76
'{' (123) 7 8 9 23 24 77
'}' (125) 7 8 9 23 24 78
error (256)
ROOT (258)
FUNCTION (259)
DECL (260)
PARAM (261)
DECLID (262)
BLOCK (263)
VARDECL (264)
CALL (265)
TOK_VOID (266) 18 89
TOK_CHAR (267) 19 90
TOK_INT (268) 20 91
TOK_STRING (269) 21 48 92
TOK_IF (270) 36 37 93
TOK_ELSE (271) 37 94
TOK_WHILE (272) 35 95
TOK_RETURN (273) 38 39 96
TOK_STRUCT (274) 7 8 9 97
TOK_NULL (275) 58 98
TOK_NEW (276) 47 48 49 99
TOK_ARRAY (277) 11 17 100
TOK_EQ (278) 66 101
TOK_NE (279) 65 102
TOK_LT (280) 67 103
TOK_LE (281) 68 104
TOK_GT (282) 69 105
TOK_GE (283) 70 106
TOK_IDENT (284) 7 8 9 10 11 16 17 22 47 50 51 52 54 107
TOK_INTCON (285) 55 108
TOK_CHARCON (286) 56 109
TOK_STRINGCON (287) 57 110
TOK_BLOCK (288)
TOK_CALL (289)
TOK_IFELSE (290)
TOK_INITDECL (291)
TOK_POS (292)
TOK_NEG (293)
TOK_NEWARRAY (294)
TOK_TYPEID (295)
TOK_FIELD (296)
TOK_ORD (297) 111
TOK_CHR (298) 112
TOK_ROOT (299) 113
NEG (300)
POS (301)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
start (64)
    on left: 1, on right: 0
program (65)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5
structdef (66)
    on left: 7 8 9, on right: 3
fielddecl (67)
    on left: 10 11, on right: 8 9
function (68)
    on left: 12 13, on right: 2
params (69)
    on left: 14 15, on right: 13 15
identdecl (70)
    on left: 16 17, on right: 12 13 14 15 34
basetype (71)
    on left: 18 19 20 21 22, on right: 10 11 16 17 49
block (72)
    on left: 23 24 25, on right: 12 13 28
blockrec (73)
    on left: 26 27, on right: 24 26
statement (74)
    on left: 28 29 30 31 32 33, on right: 4 26 27 35 36 37
vardecl (75)
    on left: 34, on right: 29
while (76)
    on left: 35, on right: 30
ifelse (77)
    on left: 36 37, on right: 31
return (78)
    on left: 38 39, on right: 32
expr (79)
    on left: 40 41 42 43 44 45 46, on right: 33 34 35 36 37 39 40 41
    44 48 49 51 53 54
allocator (80)
    on left: 47 48 49, on right: 42
call (81)
    on left: 50 51, on right: 43
variable (82)
    on left: 52 53 54, on right: 45
constant (83)
    on left: 55 56 57 58, on right: 46
UNOP (84)
    on left: 59, on right: 41
BINOP (85)
    on left: 60 61 62 63 64 65 66 67 68 69 70 71 72, on right: 40
token (86)
    on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90
    91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108
    109 110 111 112 113, on right: 5


State 0

    0 $accept: . start $end

    $default  reduce using rule 6 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . function
    3        | program . structdef
    4        | program . statement
    5        | program . token

    TOK_VOID       shift, and go to state 4
    TOK_CHAR       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_ELSE       shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_ARRAY      shift, and go to state 15
    TOK_EQ         shift, and go to state 16
    TOK_NE         shift, and go to state 17
    TOK_LT         shift, and go to state 18
    TOK_LE         shift, and go to state 19
    TOK_GT         shift, and go to state 20
    TOK_GE         shift, and go to state 21
    TOK_IDENT      shift, and go to state 22
    TOK_INTCON     shift, and go to state 23
    TOK_CHARCON    shift, and go to state 24
    TOK_STRINGCON  shift, and go to state 25
    TOK_ORD        shift, and go to state 26
    TOK_CHR        shift, and go to state 27
    TOK_ROOT       shift, and go to state 28
    '='            shift, and go to state 29
    '+'            shift, and go to state 30
    '-'            shift, and go to state 31
    '*'            shift, and go to state 32
    '/'            shift, and go to state 33
    '%'            shift, and go to state 34
    '!'            shift, and go to state 35
    '.'            shift, and go to state 36
    '['            shift, and go to state 37
    '{'            shift, and go to state 38
    '}'            shift, and go to state 39
    ';'            shift, and go to state 40
    '('            shift, and go to state 41
    ')'            shift, and go to state 42
    ','            shift, and go to state 43
    ']'            shift, and go to state 44

    $default  reduce using rule 1 (start)

    structdef  go to state 45
    function   go to state 46
    identdecl  go to state 47
    basetype   go to state 48
    block      go to state 49
    statement  go to state 50
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60
    token      go to state 61


State 3

    0 $accept: start $end .

    $default  accept


State 4

   18 basetype: TOK_VOID .
   89 token: TOK_VOID .

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_ARRAY  [reduce using rule 89 (token)]
    TOK_IDENT  reduce using rule 18 (basetype)
    TOK_IDENT  [reduce using rule 89 (token)]
    $default   reduce using rule 89 (token)


State 5

   19 basetype: TOK_CHAR .
   90 token: TOK_CHAR .

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_ARRAY  [reduce using rule 90 (token)]
    TOK_IDENT  reduce using rule 19 (basetype)
    TOK_IDENT  [reduce using rule 90 (token)]
    $default   reduce using rule 90 (token)


State 6

   20 basetype: TOK_INT .
   91 token: TOK_INT .

    TOK_ARRAY  reduce using rule 20 (basetype)
    TOK_ARRAY  [reduce using rule 91 (token)]
    TOK_IDENT  reduce using rule 20 (basetype)
    TOK_IDENT  [reduce using rule 91 (token)]
    $default   reduce using rule 91 (token)


State 7

   21 basetype: TOK_STRING .
   92 token: TOK_STRING .

    TOK_ARRAY  reduce using rule 21 (basetype)
    TOK_ARRAY  [reduce using rule 92 (token)]
    TOK_IDENT  reduce using rule 21 (basetype)
    TOK_IDENT  [reduce using rule 92 (token)]
    $default   reduce using rule 92 (token)


State 8

   36 ifelse: TOK_IF . '(' expr ')' statement
   37       | TOK_IF . '(' expr ')' statement TOK_ELSE statement
   93 token: TOK_IF .

    '('  shift, and go to state 62

    '('       [reduce using rule 93 (token)]
    $default  reduce using rule 93 (token)


State 9

   94 token: TOK_ELSE .

    $default  reduce using rule 94 (token)


State 10

   35 while: TOK_WHILE . '(' expr ')' statement
   95 token: TOK_WHILE .

    '('  shift, and go to state 63

    '('       [reduce using rule 95 (token)]
    $default  reduce using rule 95 (token)


State 11

   38 return: TOK_RETURN . ';'
   39       | TOK_RETURN . expr ';'
   96 token: TOK_RETURN .

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    ';'            shift, and go to state 71
    '('            shift, and go to state 72

    TOK_NULL       [reduce using rule 96 (token)]
    TOK_NEW        [reduce using rule 96 (token)]
    TOK_IDENT      [reduce using rule 96 (token)]
    TOK_INTCON     [reduce using rule 96 (token)]
    TOK_CHARCON    [reduce using rule 96 (token)]
    TOK_STRINGCON  [reduce using rule 96 (token)]
    '-'            [reduce using rule 96 (token)]
    ';'            [reduce using rule 96 (token)]
    '('            [reduce using rule 96 (token)]
    $default       reduce using rule 96 (token)

    expr       go to state 73
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 12

    7 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    8          | TOK_STRUCT . TOK_IDENT '{' fielddecl ';' '}'
    9          | TOK_STRUCT . TOK_IDENT '{' fielddecl ';' fielddecl '}'
   97 token: TOK_STRUCT .

    TOK_IDENT  shift, and go to state 74

    TOK_IDENT  [reduce using rule 97 (token)]
    $default   reduce using rule 97 (token)


State 13

   58 constant: TOK_NULL .
   98 token: TOK_NULL .

    TOK_EQ    reduce using rule 58 (constant)
    TOK_EQ    [reduce using rule 98 (token)]
    TOK_NE    reduce using rule 58 (constant)
    TOK_NE    [reduce using rule 98 (token)]
    TOK_LT    reduce using rule 58 (constant)
    TOK_LT    [reduce using rule 98 (token)]
    TOK_LE    reduce using rule 58 (constant)
    TOK_LE    [reduce using rule 98 (token)]
    TOK_GT    reduce using rule 58 (constant)
    TOK_GT    [reduce using rule 98 (token)]
    TOK_GE    reduce using rule 58 (constant)
    TOK_GE    [reduce using rule 98 (token)]
    '='       reduce using rule 58 (constant)
    '='       [reduce using rule 98 (token)]
    '+'       reduce using rule 58 (constant)
    '+'       [reduce using rule 98 (token)]
    '-'       reduce using rule 58 (constant)
    '-'       [reduce using rule 98 (token)]
    '*'       reduce using rule 58 (constant)
    '*'       [reduce using rule 98 (token)]
    '/'       reduce using rule 58 (constant)
    '/'       [reduce using rule 98 (token)]
    '.'       reduce using rule 58 (constant)
    '.'       [reduce using rule 98 (token)]
    '['       reduce using rule 58 (constant)
    '['       [reduce using rule 98 (token)]
    ';'       reduce using rule 58 (constant)
    ';'       [reduce using rule 98 (token)]
    $default  reduce using rule 98 (token)


State 14

   47 allocator: TOK_NEW . TOK_IDENT '(' ')'
   48          | TOK_NEW . TOK_STRING '(' expr ')'
   49          | TOK_NEW . basetype '[' expr ']'
   99 token: TOK_NEW .

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 78
    TOK_IDENT   shift, and go to state 79

    TOK_VOID    [reduce using rule 99 (token)]
    TOK_CHAR    [reduce using rule 99 (token)]
    TOK_INT     [reduce using rule 99 (token)]
    TOK_STRING  [reduce using rule 99 (token)]
    TOK_IDENT   [reduce using rule 99 (token)]
    $default    reduce using rule 99 (token)

    basetype  go to state 80


State 15

  100 token: TOK_ARRAY .

    $default  reduce using rule 100 (token)


State 16

  101 token: TOK_EQ .

    $default  reduce using rule 101 (token)


State 17

  102 token: TOK_NE .

    $default  reduce using rule 102 (token)


State 18

  103 token: TOK_LT .

    $default  reduce using rule 103 (token)


State 19

  104 token: TOK_LE .

    $default  reduce using rule 104 (token)


State 20

  105 token: TOK_GT .

    $default  reduce using rule 105 (token)


State 21

  106 token: TOK_GE .

    $default  reduce using rule 106 (token)


State 22

   22 basetype: TOK_IDENT .
   50 call: TOK_IDENT . '(' ')'
   51     | TOK_IDENT . '(' expr ')'
   52 variable: TOK_IDENT .
  107 token: TOK_IDENT .

    '('  shift, and go to state 81

    TOK_ARRAY  reduce using rule 22 (basetype)
    TOK_ARRAY  [reduce using rule 107 (token)]
    TOK_EQ     reduce using rule 52 (variable)
    TOK_EQ     [reduce using rule 107 (token)]
    TOK_NE     reduce using rule 52 (variable)
    TOK_NE     [reduce using rule 107 (token)]
    TOK_LT     reduce using rule 52 (variable)
    TOK_LT     [reduce using rule 107 (token)]
    TOK_LE     reduce using rule 52 (variable)
    TOK_LE     [reduce using rule 107 (token)]
    TOK_GT     reduce using rule 52 (variable)
    TOK_GT     [reduce using rule 107 (token)]
    TOK_GE     reduce using rule 52 (variable)
    TOK_GE     [reduce using rule 107 (token)]
    TOK_IDENT  reduce using rule 22 (basetype)
    TOK_IDENT  [reduce using rule 107 (token)]
    '='        reduce using rule 52 (variable)
    '='        [reduce using rule 107 (token)]
    '+'        reduce using rule 52 (variable)
    '+'        [reduce using rule 107 (token)]
    '-'        reduce using rule 52 (variable)
    '-'        [reduce using rule 107 (token)]
    '*'        reduce using rule 52 (variable)
    '*'        [reduce using rule 107 (token)]
    '/'        reduce using rule 52 (variable)
    '/'        [reduce using rule 107 (token)]
    '.'        reduce using rule 52 (variable)
    '.'        [reduce using rule 107 (token)]
    '['        reduce using rule 52 (variable)
    '['        [reduce using rule 107 (token)]
    ';'        reduce using rule 52 (variable)
    ';'        [reduce using rule 107 (token)]
    '('        [reduce using rule 107 (token)]
    $default   reduce using rule 107 (token)


State 23

   55 constant: TOK_INTCON .
  108 token: TOK_INTCON .

    TOK_EQ    reduce using rule 55 (constant)
    TOK_EQ    [reduce using rule 108 (token)]
    TOK_NE    reduce using rule 55 (constant)
    TOK_NE    [reduce using rule 108 (token)]
    TOK_LT    reduce using rule 55 (constant)
    TOK_LT    [reduce using rule 108 (token)]
    TOK_LE    reduce using rule 55 (constant)
    TOK_LE    [reduce using rule 108 (token)]
    TOK_GT    reduce using rule 55 (constant)
    TOK_GT    [reduce using rule 108 (token)]
    TOK_GE    reduce using rule 55 (constant)
    TOK_GE    [reduce using rule 108 (token)]
    '='       reduce using rule 55 (constant)
    '='       [reduce using rule 108 (token)]
    '+'       reduce using rule 55 (constant)
    '+'       [reduce using rule 108 (token)]
    '-'       reduce using rule 55 (constant)
    '-'       [reduce using rule 108 (token)]
    '*'       reduce using rule 55 (constant)
    '*'       [reduce using rule 108 (token)]
    '/'       reduce using rule 55 (constant)
    '/'       [reduce using rule 108 (token)]
    '.'       reduce using rule 55 (constant)
    '.'       [reduce using rule 108 (token)]
    '['       reduce using rule 55 (constant)
    '['       [reduce using rule 108 (token)]
    ';'       reduce using rule 55 (constant)
    ';'       [reduce using rule 108 (token)]
    $default  reduce using rule 108 (token)


State 24

   56 constant: TOK_CHARCON .
  109 token: TOK_CHARCON .

    TOK_EQ    reduce using rule 56 (constant)
    TOK_EQ    [reduce using rule 109 (token)]
    TOK_NE    reduce using rule 56 (constant)
    TOK_NE    [reduce using rule 109 (token)]
    TOK_LT    reduce using rule 56 (constant)
    TOK_LT    [reduce using rule 109 (token)]
    TOK_LE    reduce using rule 56 (constant)
    TOK_LE    [reduce using rule 109 (token)]
    TOK_GT    reduce using rule 56 (constant)
    TOK_GT    [reduce using rule 109 (token)]
    TOK_GE    reduce using rule 56 (constant)
    TOK_GE    [reduce using rule 109 (token)]
    '='       reduce using rule 56 (constant)
    '='       [reduce using rule 109 (token)]
    '+'       reduce using rule 56 (constant)
    '+'       [reduce using rule 109 (token)]
    '-'       reduce using rule 56 (constant)
    '-'       [reduce using rule 109 (token)]
    '*'       reduce using rule 56 (constant)
    '*'       [reduce using rule 109 (token)]
    '/'       reduce using rule 56 (constant)
    '/'       [reduce using rule 109 (token)]
    '.'       reduce using rule 56 (constant)
    '.'       [reduce using rule 109 (token)]
    '['       reduce using rule 56 (constant)
    '['       [reduce using rule 109 (token)]
    ';'       reduce using rule 56 (constant)
    ';'       [reduce using rule 109 (token)]
    $default  reduce using rule 109 (token)


State 25

   57 constant: TOK_STRINGCON .
  110 token: TOK_STRINGCON .

    TOK_EQ    reduce using rule 57 (constant)
    TOK_EQ    [reduce using rule 110 (token)]
    TOK_NE    reduce using rule 57 (constant)
    TOK_NE    [reduce using rule 110 (token)]
    TOK_LT    reduce using rule 57 (constant)
    TOK_LT    [reduce using rule 110 (token)]
    TOK_LE    reduce using rule 57 (constant)
    TOK_LE    [reduce using rule 110 (token)]
    TOK_GT    reduce using rule 57 (constant)
    TOK_GT    [reduce using rule 110 (token)]
    TOK_GE    reduce using rule 57 (constant)
    TOK_GE    [reduce using rule 110 (token)]
    '='       reduce using rule 57 (constant)
    '='       [reduce using rule 110 (token)]
    '+'       reduce using rule 57 (constant)
    '+'       [reduce using rule 110 (token)]
    '-'       reduce using rule 57 (constant)
    '-'       [reduce using rule 110 (token)]
    '*'       reduce using rule 57 (constant)
    '*'       [reduce using rule 110 (token)]
    '/'       reduce using rule 57 (constant)
    '/'       [reduce using rule 110 (token)]
    '.'       reduce using rule 57 (constant)
    '.'       [reduce using rule 110 (token)]
    '['       reduce using rule 57 (constant)
    '['       [reduce using rule 110 (token)]
    ';'       reduce using rule 57 (constant)
    ';'       [reduce using rule 110 (token)]
    $default  reduce using rule 110 (token)


State 26

  111 token: TOK_ORD .

    $default  reduce using rule 111 (token)


State 27

  112 token: TOK_CHR .

    $default  reduce using rule 112 (token)


State 28

  113 token: TOK_ROOT .

    $default  reduce using rule 113 (token)


State 29

   82 token: '=' .

    $default  reduce using rule 82 (token)


State 30

   83 token: '+' .

    $default  reduce using rule 83 (token)


State 31

   59 UNOP: '-' .
   84 token: '-' .

    TOK_NULL       reduce using rule 59 (UNOP)
    TOK_NULL       [reduce using rule 84 (token)]
    TOK_NEW        reduce using rule 59 (UNOP)
    TOK_NEW        [reduce using rule 84 (token)]
    TOK_IDENT      reduce using rule 59 (UNOP)
    TOK_IDENT      [reduce using rule 84 (token)]
    TOK_INTCON     reduce using rule 59 (UNOP)
    TOK_INTCON     [reduce using rule 84 (token)]
    TOK_CHARCON    reduce using rule 59 (UNOP)
    TOK_CHARCON    [reduce using rule 84 (token)]
    TOK_STRINGCON  reduce using rule 59 (UNOP)
    TOK_STRINGCON  [reduce using rule 84 (token)]
    '-'            reduce using rule 59 (UNOP)
    '-'            [reduce using rule 84 (token)]
    '('            reduce using rule 59 (UNOP)
    '('            [reduce using rule 84 (token)]
    $default       reduce using rule 84 (token)


State 32

   85 token: '*' .

    $default  reduce using rule 85 (token)


State 33

   86 token: '/' .

    $default  reduce using rule 86 (token)


State 34

   87 token: '%' .

    $default  reduce using rule 87 (token)


State 35

   88 token: '!' .

    $default  reduce using rule 88 (token)


State 36

   81 token: '.' .

    $default  reduce using rule 81 (token)


State 37

   75 token: '[' .

    $default  reduce using rule 75 (token)


State 38

   23 block: '{' . '}'
   24      | '{' . blockrec '}'
   77 token: '{' .

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    '}'            shift, and go to state 88
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    TOK_VOID       [reduce using rule 77 (token)]
    TOK_CHAR       [reduce using rule 77 (token)]
    TOK_INT        [reduce using rule 77 (token)]
    TOK_STRING     [reduce using rule 77 (token)]
    TOK_IF         [reduce using rule 77 (token)]
    TOK_WHILE      [reduce using rule 77 (token)]
    TOK_RETURN     [reduce using rule 77 (token)]
    TOK_NULL       [reduce using rule 77 (token)]
    TOK_NEW        [reduce using rule 77 (token)]
    TOK_IDENT      [reduce using rule 77 (token)]
    TOK_INTCON     [reduce using rule 77 (token)]
    TOK_CHARCON    [reduce using rule 77 (token)]
    TOK_STRINGCON  [reduce using rule 77 (token)]
    '-'            [reduce using rule 77 (token)]
    '{'            [reduce using rule 77 (token)]
    '}'            [reduce using rule 77 (token)]
    ';'            [reduce using rule 77 (token)]
    '('            [reduce using rule 77 (token)]
    $default       reduce using rule 77 (token)

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    blockrec   go to state 91
    statement  go to state 92
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 39

   78 token: '}' .

    $default  reduce using rule 78 (token)


State 40

   25 block: ';' .
   79 token: ';' .

    $end           reduce using rule 25 (block)
    $end           [reduce using rule 79 (token)]
    TOK_VOID       reduce using rule 25 (block)
    TOK_VOID       [reduce using rule 79 (token)]
    TOK_CHAR       reduce using rule 25 (block)
    TOK_CHAR       [reduce using rule 79 (token)]
    TOK_INT        reduce using rule 25 (block)
    TOK_INT        [reduce using rule 79 (token)]
    TOK_STRING     reduce using rule 25 (block)
    TOK_STRING     [reduce using rule 79 (token)]
    TOK_IF         reduce using rule 25 (block)
    TOK_IF         [reduce using rule 79 (token)]
    TOK_ELSE       reduce using rule 25 (block)
    TOK_ELSE       [reduce using rule 79 (token)]
    TOK_WHILE      reduce using rule 25 (block)
    TOK_WHILE      [reduce using rule 79 (token)]
    TOK_RETURN     reduce using rule 25 (block)
    TOK_RETURN     [reduce using rule 79 (token)]
    TOK_STRUCT     reduce using rule 25 (block)
    TOK_STRUCT     [reduce using rule 79 (token)]
    TOK_NULL       reduce using rule 25 (block)
    TOK_NULL       [reduce using rule 79 (token)]
    TOK_NEW        reduce using rule 25 (block)
    TOK_NEW        [reduce using rule 79 (token)]
    TOK_ARRAY      reduce using rule 25 (block)
    TOK_ARRAY      [reduce using rule 79 (token)]
    TOK_EQ         reduce using rule 25 (block)
    TOK_EQ         [reduce using rule 79 (token)]
    TOK_NE         reduce using rule 25 (block)
    TOK_NE         [reduce using rule 79 (token)]
    TOK_LT         reduce using rule 25 (block)
    TOK_LT         [reduce using rule 79 (token)]
    TOK_LE         reduce using rule 25 (block)
    TOK_LE         [reduce using rule 79 (token)]
    TOK_GT         reduce using rule 25 (block)
    TOK_GT         [reduce using rule 79 (token)]
    TOK_GE         reduce using rule 25 (block)
    TOK_GE         [reduce using rule 79 (token)]
    TOK_IDENT      reduce using rule 25 (block)
    TOK_IDENT      [reduce using rule 79 (token)]
    TOK_INTCON     reduce using rule 25 (block)
    TOK_INTCON     [reduce using rule 79 (token)]
    TOK_CHARCON    reduce using rule 25 (block)
    TOK_CHARCON    [reduce using rule 79 (token)]
    TOK_STRINGCON  reduce using rule 25 (block)
    TOK_STRINGCON  [reduce using rule 79 (token)]
    TOK_ORD        reduce using rule 25 (block)
    TOK_ORD        [reduce using rule 79 (token)]
    TOK_CHR        reduce using rule 25 (block)
    TOK_CHR        [reduce using rule 79 (token)]
    TOK_ROOT       reduce using rule 25 (block)
    TOK_ROOT       [reduce using rule 79 (token)]
    '='            reduce using rule 25 (block)
    '='            [reduce using rule 79 (token)]
    '+'            reduce using rule 25 (block)
    '+'            [reduce using rule 79 (token)]
    '-'            reduce using rule 25 (block)
    '-'            [reduce using rule 79 (token)]
    '*'            reduce using rule 25 (block)
    '*'            [reduce using rule 79 (token)]
    '/'            reduce using rule 25 (block)
    '/'            [reduce using rule 79 (token)]
    '%'            reduce using rule 25 (block)
    '%'            [reduce using rule 79 (token)]
    '!'            reduce using rule 25 (block)
    '!'            [reduce using rule 79 (token)]
    '.'            reduce using rule 25 (block)
    '.'            [reduce using rule 79 (token)]
    '['            reduce using rule 25 (block)
    '['            [reduce using rule 79 (token)]
    '{'            reduce using rule 25 (block)
    '{'            [reduce using rule 79 (token)]
    '}'            reduce using rule 25 (block)
    '}'            [reduce using rule 79 (token)]
    ';'            reduce using rule 25 (block)
    ';'            [reduce using rule 79 (token)]
    '('            reduce using rule 25 (block)
    '('            [reduce using rule 79 (token)]
    ')'            reduce using rule 25 (block)
    ')'            [reduce using rule 79 (token)]
    ','            reduce using rule 25 (block)
    ','            [reduce using rule 79 (token)]
    ']'            reduce using rule 25 (block)
    ']'            [reduce using rule 79 (token)]
    $default       reduce using rule 25 (block)


State 41

   44 expr: '(' . expr ')'
   73 token: '(' .

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    TOK_NULL       [reduce using rule 73 (token)]
    TOK_NEW        [reduce using rule 73 (token)]
    TOK_IDENT      [reduce using rule 73 (token)]
    TOK_INTCON     [reduce using rule 73 (token)]
    TOK_CHARCON    [reduce using rule 73 (token)]
    TOK_STRINGCON  [reduce using rule 73 (token)]
    '-'            [reduce using rule 73 (token)]
    '('            [reduce using rule 73 (token)]
    $default       reduce using rule 73 (token)

    expr       go to state 93
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 42

   74 token: ')' .

    $default  reduce using rule 74 (token)


State 43

   80 token: ',' .

    $default  reduce using rule 80 (token)


State 44

   76 token: ']' .

    $default  reduce using rule 76 (token)


State 45

    3 program: program structdef .

    $default  reduce using rule 3 (program)


State 46

    2 program: program function .

    $default  reduce using rule 2 (program)


State 47

   12 function: identdecl . '(' ')' block
   13         | identdecl . '(' params ')' block
   34 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 94
    '('  shift, and go to state 95


State 48

   16 identdecl: basetype . TOK_IDENT
   17          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 96
    TOK_IDENT  shift, and go to state 97


State 49

   28 statement: block .

    $default  reduce using rule 28 (statement)


State 50

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 51

   29 statement: vardecl .

    $default  reduce using rule 29 (statement)


State 52

   30 statement: while .

    $default  reduce using rule 30 (statement)


State 53

   31 statement: ifelse .

    $default  reduce using rule 31 (statement)


State 54

   32 statement: return .

    $default  reduce using rule 32 (statement)


State 55

   33 statement: expr . ';'
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ';'     shift, and go to state 111

    BINOP  go to state 112


State 56

   42 expr: allocator .

    $default  reduce using rule 42 (expr)


State 57

   43 expr: call .

    $default  reduce using rule 43 (expr)


State 58

   45 expr: variable .

    $default  reduce using rule 45 (expr)


State 59

   46 expr: constant .

    $default  reduce using rule 46 (expr)


State 60

   41 expr: UNOP . expr

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 113
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 61

    5 program: program token .

    $default  reduce using rule 5 (program)


State 62

   36 ifelse: TOK_IF '(' . expr ')' statement
   37       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 114
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 63

   35 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 115
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 64

   58 constant: TOK_NULL .

    $default  reduce using rule 58 (constant)


State 65

   47 allocator: TOK_NEW . TOK_IDENT '(' ')'
   48          | TOK_NEW . TOK_STRING '(' expr ')'
   49          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 78
    TOK_IDENT   shift, and go to state 79

    basetype  go to state 80


State 66

   50 call: TOK_IDENT . '(' ')'
   51     | TOK_IDENT . '(' expr ')'
   52 variable: TOK_IDENT .

    '('  shift, and go to state 81

    $default  reduce using rule 52 (variable)


State 67

   55 constant: TOK_INTCON .

    $default  reduce using rule 55 (constant)


State 68

   56 constant: TOK_CHARCON .

    $default  reduce using rule 56 (constant)


State 69

   57 constant: TOK_STRINGCON .

    $default  reduce using rule 57 (constant)


State 70

   59 UNOP: '-' .

    $default  reduce using rule 59 (UNOP)


State 71

   38 return: TOK_RETURN ';' .

    $default  reduce using rule 38 (return)


State 72

   44 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 93
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 73

   39 return: TOK_RETURN expr . ';'
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ';'     shift, and go to state 116

    BINOP  go to state 112


State 74

    7 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    8          | TOK_STRUCT TOK_IDENT . '{' fielddecl ';' '}'
    9          | TOK_STRUCT TOK_IDENT . '{' fielddecl ';' fielddecl '}'

    '{'  shift, and go to state 117


State 75

   18 basetype: TOK_VOID .

    $default  reduce using rule 18 (basetype)


State 76

   19 basetype: TOK_CHAR .

    $default  reduce using rule 19 (basetype)


State 77

   20 basetype: TOK_INT .

    $default  reduce using rule 20 (basetype)


State 78

   21 basetype: TOK_STRING .
   48 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 118

    $default  reduce using rule 21 (basetype)


State 79

   22 basetype: TOK_IDENT .
   47 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 119

    $default  reduce using rule 22 (basetype)


State 80

   49 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 120


State 81

   50 call: TOK_IDENT '(' . ')'
   51     | TOK_IDENT '(' . expr ')'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72
    ')'            shift, and go to state 121

    expr       go to state 122
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 82

   21 basetype: TOK_STRING .

    $default  reduce using rule 21 (basetype)


State 83

   36 ifelse: TOK_IF . '(' expr ')' statement
   37       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 62


State 84

   35 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 63


State 85

   38 return: TOK_RETURN . ';'
   39       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    ';'            shift, and go to state 71
    '('            shift, and go to state 72

    expr       go to state 73
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 86

   22 basetype: TOK_IDENT .
   50 call: TOK_IDENT . '(' ')'
   51     | TOK_IDENT . '(' expr ')'
   52 variable: TOK_IDENT .

    '('  shift, and go to state 81

    TOK_ARRAY  reduce using rule 22 (basetype)
    TOK_IDENT  reduce using rule 22 (basetype)
    $default   reduce using rule 52 (variable)


State 87

   23 block: '{' . '}'
   24      | '{' . blockrec '}'

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    '}'            shift, and go to state 88
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    blockrec   go to state 91
    statement  go to state 92
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 88

   23 block: '{' '}' .

    $default  reduce using rule 23 (block)


State 89

   25 block: ';' .

    $default  reduce using rule 25 (block)


State 90

   34 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 94


State 91

   24 block: '{' blockrec . '}'
   26 blockrec: blockrec . statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    '}'            shift, and go to state 123
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 124
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 92

   27 blockrec: statement .

    $default  reduce using rule 27 (blockrec)


State 93

   40 expr: expr . BINOP expr
   44     | '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ')'     shift, and go to state 125

    BINOP  go to state 112


State 94

   34 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 126
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 95

   12 function: identdecl '(' . ')' block
   13         | identdecl '(' . params ')' block

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 127
    ')'         shift, and go to state 128

    params     go to state 129
    identdecl  go to state 130
    basetype   go to state 48


State 96

   17 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 131


State 97

   16 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 16 (identdecl)


State 98

   66 BINOP: TOK_EQ .

    $default  reduce using rule 66 (BINOP)


State 99

   65 BINOP: TOK_NE .

    $default  reduce using rule 65 (BINOP)


State 100

   67 BINOP: TOK_LT .

    $default  reduce using rule 67 (BINOP)


State 101

   68 BINOP: TOK_LE .

    $default  reduce using rule 68 (BINOP)


State 102

   69 BINOP: TOK_GT .

    $default  reduce using rule 69 (BINOP)


State 103

   70 BINOP: TOK_GE .

    $default  reduce using rule 70 (BINOP)


State 104

   61 BINOP: '=' .

    $default  reduce using rule 61 (BINOP)


State 105

   60 BINOP: '+' .

    $default  reduce using rule 60 (BINOP)


State 106

   62 BINOP: '-' .

    $default  reduce using rule 62 (BINOP)


State 107

   63 BINOP: '*' .

    $default  reduce using rule 63 (BINOP)


State 108

   64 BINOP: '/' .

    $default  reduce using rule 64 (BINOP)


State 109

   54 variable: expr '.' . TOK_IDENT
   71 BINOP: '.' .

    TOK_IDENT  shift, and go to state 132

    TOK_IDENT  [reduce using rule 71 (BINOP)]
    $default   reduce using rule 71 (BINOP)


State 110

   53 variable: expr '[' . expr ']'
   72 BINOP: '[' .

    TOK_NULL       shift, and go to state 64
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '('            shift, and go to state 72

    TOK_NULL       [reduce using rule 72 (BINOP)]
    TOK_IDENT      [reduce using rule 72 (BINOP)]
    TOK_INTCON     [reduce using rule 72 (BINOP)]
    TOK_CHARCON    [reduce using rule 72 (BINOP)]
    TOK_STRINGCON  [reduce using rule 72 (BINOP)]
    '('            [reduce using rule 72 (BINOP)]
    $default       reduce using rule 72 (BINOP)

    expr       go to state 133
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 111

   33 statement: expr ';' .

    $default  reduce using rule 33 (statement)


State 112

   40 expr: expr BINOP . expr

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 134
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 113

   40 expr: expr . BINOP expr
   41     | UNOP expr .
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110

    TOK_EQ    [reduce using rule 41 (expr)]
    TOK_NE    [reduce using rule 41 (expr)]
    TOK_LT    [reduce using rule 41 (expr)]
    TOK_LE    [reduce using rule 41 (expr)]
    TOK_GT    [reduce using rule 41 (expr)]
    TOK_GE    [reduce using rule 41 (expr)]
    '='       [reduce using rule 41 (expr)]
    '+'       [reduce using rule 41 (expr)]
    '-'       [reduce using rule 41 (expr)]
    '*'       [reduce using rule 41 (expr)]
    '/'       [reduce using rule 41 (expr)]
    '.'       [reduce using rule 41 (expr)]
    '['       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)

    BINOP  go to state 112


State 114

   36 ifelse: TOK_IF '(' expr . ')' statement
   37       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ')'     shift, and go to state 135

    BINOP  go to state 112


State 115

   35 while: TOK_WHILE '(' expr . ')' statement
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ')'     shift, and go to state 136

    BINOP  go to state 112


State 116

   39 return: TOK_RETURN expr ';' .

    $default  reduce using rule 39 (return)


State 117

    7 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    8          | TOK_STRUCT TOK_IDENT '{' . fielddecl ';' '}'
    9          | TOK_STRUCT TOK_IDENT '{' . fielddecl ';' fielddecl '}'

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 127
    '}'         shift, and go to state 137

    fielddecl  go to state 138
    basetype   go to state 139


State 118

   48 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 140
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 119

   47 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 141


State 120

   49 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 66
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '('            shift, and go to state 72

    expr       go to state 142
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 121

   50 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 50 (call)


State 122

   40 expr: expr . BINOP expr
   51 call: TOK_IDENT '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ')'     shift, and go to state 143

    BINOP  go to state 112


State 123

   24 block: '{' blockrec '}' .

    $default  reduce using rule 24 (block)


State 124

   26 blockrec: blockrec statement .

    $default  reduce using rule 26 (blockrec)


State 125

   44 expr: '(' expr ')' .

    $default  reduce using rule 44 (expr)


State 126

   34 vardecl: identdecl '=' expr . ';'
   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ';'     shift, and go to state 144

    BINOP  go to state 112


State 127

   22 basetype: TOK_IDENT .

    $default  reduce using rule 22 (basetype)


State 128

   12 function: identdecl '(' ')' . block

    '{'  shift, and go to state 87
    ';'  shift, and go to state 89

    block  go to state 145


State 129

   13 function: identdecl '(' params . ')' block
   15 params: params . ',' identdecl

    ')'  shift, and go to state 146
    ','  shift, and go to state 147


State 130

   14 params: identdecl .

    $default  reduce using rule 14 (params)


State 131

   17 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 17 (identdecl)


State 132

   54 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 54 (variable)


State 133

   40 expr: expr . BINOP expr
   53 variable: expr . '[' expr ']'
   53         | expr '[' expr . ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ']'     shift, and go to state 148

    BINOP  go to state 112


State 134

   40 expr: expr . BINOP expr
   40     | expr BINOP expr .
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110

    TOK_EQ    [reduce using rule 40 (expr)]
    TOK_NE    [reduce using rule 40 (expr)]
    TOK_LT    [reduce using rule 40 (expr)]
    TOK_LE    [reduce using rule 40 (expr)]
    TOK_GT    [reduce using rule 40 (expr)]
    TOK_GE    [reduce using rule 40 (expr)]
    '='       [reduce using rule 40 (expr)]
    '+'       [reduce using rule 40 (expr)]
    '-'       [reduce using rule 40 (expr)]
    '*'       [reduce using rule 40 (expr)]
    '/'       [reduce using rule 40 (expr)]
    '.'       [reduce using rule 40 (expr)]
    '['       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)

    BINOP  go to state 112


State 135

   36 ifelse: TOK_IF '(' expr ')' . statement
   37       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 149
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 136

   35 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 150
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 137

    7 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 7 (structdef)


State 138

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl . ';' '}'
    9          | TOK_STRUCT TOK_IDENT '{' fielddecl . ';' fielddecl '}'

    ';'  shift, and go to state 151


State 139

   10 fielddecl: basetype . TOK_IDENT
   11          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 152
    TOK_IDENT  shift, and go to state 153


State 140

   40 expr: expr . BINOP expr
   48 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ')'     shift, and go to state 154

    BINOP  go to state 112


State 141

   47 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 47 (allocator)


State 142

   40 expr: expr . BINOP expr
   49 allocator: TOK_NEW basetype '[' expr . ']'
   53 variable: expr . '[' expr ']'
   54         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 98
    TOK_NE  shift, and go to state 99
    TOK_LT  shift, and go to state 100
    TOK_LE  shift, and go to state 101
    TOK_GT  shift, and go to state 102
    TOK_GE  shift, and go to state 103
    '='     shift, and go to state 104
    '+'     shift, and go to state 105
    '-'     shift, and go to state 106
    '*'     shift, and go to state 107
    '/'     shift, and go to state 108
    '.'     shift, and go to state 109
    '['     shift, and go to state 110
    ']'     shift, and go to state 155

    BINOP  go to state 112


State 143

   51 call: TOK_IDENT '(' expr ')' .

    $default  reduce using rule 51 (call)


State 144

   34 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


State 145

   12 function: identdecl '(' ')' block .

    $default  reduce using rule 12 (function)


State 146

   13 function: identdecl '(' params ')' . block

    '{'  shift, and go to state 87
    ';'  shift, and go to state 89

    block  go to state 156


State 147

   15 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 127

    identdecl  go to state 157
    basetype   go to state 48


State 148

   53 variable: expr '[' expr ']' .

    $default  reduce using rule 53 (variable)


State 149

   36 ifelse: TOK_IF '(' expr ')' statement .
   37       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 158

    $default  reduce using rule 36 (ifelse)


State 150

   35 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


State 151

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' . '}'
    9          | TOK_STRUCT TOK_IDENT '{' fielddecl ';' . fielddecl '}'

    TOK_VOID    shift, and go to state 75
    TOK_CHAR    shift, and go to state 76
    TOK_INT     shift, and go to state 77
    TOK_STRING  shift, and go to state 82
    TOK_IDENT   shift, and go to state 127
    '}'         shift, and go to state 159

    fielddecl  go to state 160
    basetype   go to state 139


State 152

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 161


State 153

   10 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 10 (fielddecl)


State 154

   48 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 48 (allocator)


State 155

   49 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 49 (allocator)


State 156

   13 function: identdecl '(' params ')' block .

    $default  reduce using rule 13 (function)


State 157

   15 params: params ',' identdecl .

    $default  reduce using rule 15 (params)


State 158

   37 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 75
    TOK_CHAR       shift, and go to state 76
    TOK_INT        shift, and go to state 77
    TOK_STRING     shift, and go to state 82
    TOK_IF         shift, and go to state 83
    TOK_WHILE      shift, and go to state 84
    TOK_RETURN     shift, and go to state 85
    TOK_NULL       shift, and go to state 64
    TOK_NEW        shift, and go to state 65
    TOK_IDENT      shift, and go to state 86
    TOK_INTCON     shift, and go to state 67
    TOK_CHARCON    shift, and go to state 68
    TOK_STRINGCON  shift, and go to state 69
    '-'            shift, and go to state 70
    '{'            shift, and go to state 87
    ';'            shift, and go to state 89
    '('            shift, and go to state 72

    identdecl  go to state 90
    basetype   go to state 48
    block      go to state 49
    statement  go to state 162
    vardecl    go to state 51
    while      go to state 52
    ifelse     go to state 53
    return     go to state 54
    expr       go to state 55
    allocator  go to state 56
    call       go to state 57
    variable   go to state 58
    constant   go to state 59
    UNOP       go to state 60


State 159

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' '}' .

    $default  reduce using rule 8 (structdef)


State 160

    9 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl . '}'

    '}'  shift, and go to state 163


State 161

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


State 162

   37 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 37 (ifelse)


State 163

    9 structdef: TOK_STRUCT TOK_IDENT '{' fielddecl ';' fielddecl '}' .

    $default  reduce using rule 9 (structdef)
